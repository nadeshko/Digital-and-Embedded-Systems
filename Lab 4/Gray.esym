F N "main" 0 52 ""
D G "__PCH__" 0 64 ""5.081""
D G "__DEVICE__" 0 64 "2740"
D G "__DATE__" 0 64 ""3-Feb-20""
D G "__TIME__" 0 64 ""11:35:59""
D G "_UNICODE" 0 64 ""?""
D G "__EVAL" 0 64 ""?"" "Standard Header file for the PIC18F27K40 device ////////////////"
c L "set_tris_a" 1 3 22 "FUNCTION"
f N "set_tris_a" 1 67 ""
v L "value" 1 67 "int8" `55 
f B "set_tris_a" 1 67 "void(int8 value)" `54 
f N "set_tris_b" 1 68 ""
v L "value" 1 68 "int8" `57 
f B "set_tris_b" 1 68 "void(int8 value)" `56 
f N "set_tris_c" 1 69 ""
v L "value" 1 69 "int8" `59 
f B "set_tris_c" 1 69 "void(int8 value)" `58 
f N "set_tris_e" 1 70 ""
v L "value" 1 70 "int8" `61 
f B "set_tris_e" 1 70 "void(int8 value)" `60 
f N "set_input_level_a" 1 71 ""
v L "value" 1 71 "int8" `63 
f B "set_input_level_a" 1 71 "void(int8 value)" `62 
f N "set_input_level_b" 1 72 ""
v L "value" 1 72 "int8" `65 
f B "set_input_level_b" 1 72 "void(int8 value)" `64 
f N "set_input_level_c" 1 73 ""
v L "value" 1 73 "int8" `67 
f B "set_input_level_c" 1 73 "void(int8 value)" `66 
f N "set_input_level_e" 1 74 ""
v L "value" 1 74 "int8" `69 
f B "set_input_level_e" 1 74 "void(int8 value)" `68 
f N "set_open_drain_a" 1 75 ""
v L "value" 1 75 "int8" `71 
f B "set_open_drain_a" 1 75 "void(int8 value)" `70 
f N "set_open_drain_b" 1 76 ""
v L "value" 1 76 "int8" `73 
f B "set_open_drain_b" 1 76 "void(int8 value)" `72 
f N "set_open_drain_c" 1 77 ""
v L "value" 1 77 "int8" `75 
f B "set_open_drain_c" 1 77 "void(int8 value)" `74 
f N "get_tris_a" 1 78 ""
f B "get_tris_a" 1 78 "int8()" `76 
f N "get_tris_b" 1 79 ""
f B "get_tris_b" 1 79 "int8()" `77 
f N "get_tris_c" 1 80 ""
f B "get_tris_c" 1 80 "int8()" `78 
f N "get_tris_e" 1 81 ""
f B "get_tris_e" 1 81 "int8()" `79 
f N "output_a" 1 82 ""
v L "value" 1 82 "int8" `81 
f B "output_a" 1 82 "void(int8 value)" `80 
f N "output_b" 1 83 ""
v L "value" 1 83 "int8" `83 
f B "output_b" 1 83 "void(int8 value)" `82 
f N "output_c" 1 84 ""
v L "value" 1 84 "int8" `85 
f B "output_c" 1 84 "void(int8 value)" `84 
f N "output_e" 1 85 ""
v L "value" 1 85 "int8" `87 
f B "output_e" 1 85 "void(int8 value)" `86 
f N "input_a" 1 86 ""
f B "input_a" 1 86 "int8()" `88 
f N "input_b" 1 87 ""
f B "input_b" 1 87 "int8()" `89 
f N "input_c" 1 88 ""
f B "input_c" 1 88 "int8()" `90 
f N "input_e" 1 89 ""
f B "input_e" 1 89 "int8()" `91 
f N "input_change_a" 1 90 ""
f B "input_change_a" 1 90 "int8()" `92 
f N "input_change_b" 1 91 ""
f B "input_change_b" 1 91 "int8()" `93 
f N "input_change_c" 1 92 ""
f B "input_change_c" 1 92 "int8()" `94 
f N "input_change_e" 1 93 ""
f B "input_change_e" 1 93 "int8()" `95 
f N "port_a_pullups" 1 94 ""
v L "upmask" 1 94 "int8" `97 
f B "port_a_pullups" 1 94 "void(int8 upmask)" `96 
f N "port_b_pullups" 1 95 ""
v L "upmask" 1 95 "int8" `99 
f B "port_b_pullups" 1 95 "void(int8 upmask)" `98 
f N "port_c_pullups" 1 96 ""
v L "upmask" 1 96 "int8" `101 
f B "port_c_pullups" 1 96 "void(int8 upmask)" `100 
f N "port_e_pullups" 1 97 ""
v L "upmask" 1 97 "int8" `103 
f B "port_e_pullups" 1 97 "void(int8 upmask)" `102 
f N "set_slow_slew_a" 1 98 ""
v L "value" 1 98 "int8" `105 
f B "set_slow_slew_a" 1 98 "void(int8 value)" `104 
f N "set_slow_slew_b" 1 99 ""
v L "value" 1 99 "int8" `107 
f B "set_slow_slew_b" 1 99 "void(int8 value)" `106 
f N "set_slow_slew_c" 1 100 ""
v L "value" 1 100 "int8" `109 
f B "set_slow_slew_c" 1 100 "void(int8 value)" `108 
f N "input" 1 101 ""
v L "pin" 1 101 "int16" `111 
f B "input" 1 101 "int8(int16 pin)" `110 
f N "input_state" 1 102 ""
v L "pin" 1 102 "int16" `113 
f B "input_state" 1 102 "int8(int16 pin)" `112 
f N "output_low" 1 103 ""
v L "pin" 1 103 "int16" `115 
f B "output_low" 1 103 "void(int16 pin)" `114 
f N "output_high" 1 104 ""
v L "pin" 1 104 "int16" `117 
f B "output_high" 1 104 "void(int16 pin)" `116 
f N "output_toggle" 1 105 ""
v L "pin" 1 105 "int16" `119 
f B "output_toggle" 1 105 "void(int16 pin)" `118 
f N "output_bit" 1 106 ""
v L "pin" 1 106 "int16" `121 
v L "level" 1 106 "int8" `122 
f B "output_bit" 1 106 "void(int16 pin,int8 level)" `120 
f N "output_float" 1 107 ""
v L "pin" 1 107 "int16" `124 
f B "output_float" 1 107 "void(int16 pin)" `123 
f N "output_drive" 1 108 ""
v L "pin" 1 108 "int16" `126 
f B "output_drive" 1 108 "void(int16 pin)" `125  "Constants used to identify pins in the above are:"
d G "PIN_A0" 1 112 "31848"
d G "PIN_A1" 1 113 "31849"
d G "PIN_A2" 1 114 "31850"
d G "PIN_A3" 1 115 "31851"
d G "PIN_A4" 1 116 "31852"
d G "PIN_A5" 1 117 "31853"
d G "PIN_A6" 1 118 "31854"
d G "PIN_A7" 1 119 "31855"
d G "PIN_B0" 1 121 "31856"
d G "PIN_B1" 1 122 "31857"
d G "PIN_B2" 1 123 "31858"
d G "PIN_B3" 1 124 "31859"
d G "PIN_B4" 1 125 "31860"
d G "PIN_B5" 1 126 "31861"
d G "PIN_B6" 1 127 "31862"
d G "PIN_B7" 1 128 "31863"
d G "PIN_C0" 1 130 "31864"
d G "PIN_C1" 1 131 "31865"
d G "PIN_C2" 1 132 "31866"
d G "PIN_C3" 1 133 "31867"
d G "PIN_C4" 1 134 "31868"
d G "PIN_C5" 1 135 "31869"
d G "PIN_C6" 1 136 "31870"
d G "PIN_C7" 1 137 "31871"
d G "PIN_E3" 1 139 "31883"
d G "FALSE" 1 142 "0"
d G "TRUE" 1 143 "1"
d G "BYTE" 1 145 "int8"
d G "BOOLEAN" 1 146 "int1"
d G "getc" 1 148 "getch"
d G "fgetc" 1 149 "getch"
d G "getchar" 1 150 "getch"
d G "putc" 1 151 "putchar"
d G "fputc" 1 152 "putchar"
d G "fgets" 1 153 "gets"
d G "fputs" 1 154 "puts"
c L "output_drive" 1 3 3 "FUNCTION"
f N "restart_cause" 1 159 ""
f B "restart_cause" 1 159 "int16()" `127 
f N "reset_cpu" 1 160 ""
f B "reset_cpu" 1 160 "void()" `128 
f N "sleep" 1 161 ""
f B "sleep" 1 161 "void()" `129 
f N "sleep" 1 162 ""
v L "type" 1 162 "int8" `131 
f B "sleep" 1 162 "void(int8 type)" `130  "Constants returned from RESTART_CAUSE() are:"
d G "NORMAL_POWER_UP" 1 164 "0x33C"
d G "BROWNOUT_RESTART" 1 165 "0x33E"
d G "MCLR_FROM_SLEEP" 1 166 "0x237"
d G "WDT_TIMEOUT" 1 167 "0x12F"
d G "WDT_FROM_SLEEP" 1 168 "0x03F"
d G "INTERRUPT_FROM_SLEEP" 1 169 "0x23F"
d G "MCLR_FROM_RUN" 1 170 "0x337"
d G "RESET_INSTRUCTION" 1 171 "0x33B"
d G "STACK_OVERFLOW" 1 172 "0x3BF"
d G "STACK_UNDERFLOW" 1 173 "0x37F"
d G "WDT_WINDOW_VIOLATION" 1 174 "0x31F"
d G "SLEEP_FULL" 1 177 "0" "Default"
d G "SLEEP_IDLE" 1 178 "1" "Clock and peripherals don't stop"
c L "sleep" 1 3 6 "FUNCTION"
f N "setup_timer_0" 1 186 ""
v L "mode" 1 186 "int16" `133 
f B "setup_timer_0" 1 186 "void(int16 mode)" `132 
f N "setup_timer_0" 1 187 ""
v L "mode" 1 187 "int16" `135 
v L "postscale" 1 187 "int8" `136 
f B "setup_timer_0" 1 187 "void(int16 mode,int8 postscale)" `134 
f N "setup_timer_0" 1 188 ""
v L "mode" 1 188 "int16" `138 
v L "period" 1 188 "int8" `139 
v L "postscale" 1 188 "int8" `140 
f B "setup_timer_0" 1 188 "void(int16 mode,int8 period,int8 postscale)" `137  "8-bit mode only"
f N "set_timer0" 1 189 ""
v L "value" 1 189 "int8" `142 
f B "set_timer0" 1 189 "void(int8 value)" `141 
f N "set_timer0" 1 190 ""
v L "value" 1 190 "int16" `144 
f B "set_timer0" 1 190 "void(int16 value)" `143 
f N "get_timer0" 1 191 ""
f B "get_timer0" 1 191 "int8()" `145 
f N "get_timer0" 1 192 ""
f G "get_timer0" 1 192 "int16(int8 mode,int8 prescaler)" `146 
f N "setup_counters" 1 193 ""
v L "mode" 1 193 "int8" `147 
v L "prescaler" 1 193 "int8" `148 
f B "setup_counters" 1 193 "void(int8 mode,int8 prescaler)" `146 
f N "set_rtcc" 1 194 ""
v L "value" 1 194 "int8" `150 
f B "set_rtcc" 1 194 "void(int8 value)" `149 
f N "set_rtcc" 1 195 ""
v L "value" 1 195 "int16" `152 
f B "set_rtcc" 1 195 "void(int16 value)" `151 
f N "get_rtcc" 1 196 ""
f B "get_rtcc" 1 196 "int8()" `153 
f N "get_rtcc" 1 197 ""
f G "get_rtcc" 1 197 "int16(int16 mode)" `154  "Constants used for SETUP_TIMER_0() first parameter are:"
d G "T0_INTERNAL" 1 199 "0x8040"
d G "T0_HFINTOSC" 1 200 "0x8060"
d G "T0_LFINTOSC" 1 201 "0x8080"
d G "T0_SOSC" 1 202 "0x80C0"
d G "T0_EXT_L_TO_H" 1 203 "0x8000"
d G "T0_EXT_H_TO_L" 1 204 "0x8020"
d G "T0_INPUT_SYNCRONIZED" 1 206 "0x0000"
d G "T0_INPUT_NOT_SYNCRONIZED" 1 207 "0x0010"
d G "T0_DIV_1" 1 209 "0x0000"
d G "T0_DIV_2" 1 210 "0x0001"
d G "T0_DIV_4" 1 211 "0x0002"
d G "T0_DIV_8" 1 212 "0x0003"
d G "T0_DIV_16" 1 213 "0x0004"
d G "T0_DIV_32" 1 214 "0x0005"
d G "T0_DIV_64" 1 215 "0x0006"
d G "T0_DIV_128" 1 216 "0x0007"
d G "T0_DIV_256" 1 217 "0x0008"
d G "T0_DIV_512" 1 218 "0x0009"
d G "T0_DIV_1024" 1 219 "0x000A"
d G "T0_DIV_2048" 1 220 "0x000B"
d G "T0_DIV_4096" 1 221 "0x000C"
d G "T0_DIV_8192" 1 222 "0x000D"
d G "T0_DIV_16384" 1 223 "0x000E"
d G "T0_DIV_32768" 1 224 "0x000F"
d G "T0_8_BIT" 1 226 "0x1000"
d G "T0_16_BIT" 1 227 "0x0000"
d G "RTCC_INTERNAL" 1 232 "0x8040"
d G "RTCC_EXT_L_TO_H" 1 233 "0x8000"
d G "RTCC_EXT_H_TO_L" 1 234 "0x8020"
d G "RTCC_OFF" 1 235 "0x0000"
d G "RTCC_8_BIT" 1 236 "0x1000"
d G "RTCC_DIV_1" 1 238 "0x0000"
d G "RTCC_DIV_2" 1 239 "0x0001"
d G "RTCC_DIV_4" 1 240 "0x0002"
d G "RTCC_DIV_8" 1 241 "0x0003"
d G "RTCC_DIV_16" 1 242 "0x0004"
d G "RTCC_DIV_32" 1 243 "0x0005"
d G "RTCC_DIV_64" 1 244 "0x0006"
d G "RTCC_DIV_128" 1 245 "0x0007"
d G "RTCC_DIV_256" 1 246 "0x0008"
c L "get_rtcc" 1 3 6 "FUNCTION"
f N "setup_wdt" 1 254 ""
v L "mode" 1 254 "int16" `155 
f B "setup_wdt" 1 254 "void(int16 mode)" `154 
f N "restart_wdt" 1 255 ""
f B "restart_wdt" 1 255 "void()" `156 
f N "get_wdt" 1 256 ""
f B "get_wdt" 1 256 "int8()" `157  "Constants used for SETUP_WDT() are:"
d G "WDT_ON" 1 259 "0x8000"
d G "WDT_OFF" 1 260 "0x0000"
d G "WDT_1MS" 1 263 "0x0001"
d G "WDT_2MS" 1 264 "0x0003"
d G "WDT_4MS" 1 265 "0x0005"
d G "WDT_8MS" 1 266 "0x0007"
d G "WDT_16MS" 1 267 "0x0009"
d G "WDT_32MS" 1 268 "0x000B"
d G "WDT_64MS" 1 269 "0x000D"
d G "WDT_128MS" 1 270 "0x000F"
d G "WDT_256MS" 1 271 "0x0011"
d G "WDT_512MS" 1 272 "0x0013"
d G "WDT_1S" 1 273 "0x0015"
d G "WDT_2S" 1 274 "0x0017"
d G "WDT_4S" 1 275 "0x0019"
d G "WDT_8S" 1 276 "0x001B"
d G "WDT_16S" 1 277 "0x001D"
d G "WDT_32S" 1 278 "0x001F"
d G "WDT_64S" 1 279 "0x0021"
d G "WDT_128S" 1 280 "0x0023"
d G "WDT_256S" 1 281 "0x0025"
d G "WDT_WINDOW_12_PERCENT" 1 284 "0x0000"
d G "WDT_WINDOW_25_PERCENT" 1 285 "0x0100"
d G "WDT_WINDOW_37_PERCENT" 1 286 "0x0200"
d G "WDT_WINDOW_50_PERCENT" 1 287 "0x0300"
d G "WDT_WINDOW_62_PERCENT" 1 288 "0x0400"
d G "WDT_WINDOW_75_PERCENT" 1 289 "0x0500"
d G "WDT_WINDOW_87_PERCENT" 1 290 "0x0600"
d G "WDT_WINDOW_100_PERCENT" 1 291 "0x0700"
d G "WDT_CLK_31000" 1 294 "0x0000"
d G "WDT_CLK_31250" 1 295 "0x1000"
c L "get_wdt" 1 3 3 "FUNCTION"
f N "setup_timer_1" 1 302 ""
v L "mode" 1 302 "int32" `160 
f B "setup_timer_1" 1 302 "void(int32 mode)" `159 
f N "get_timer1" 1 303 ""
f B "get_timer1" 1 303 "int16()" `161 
f N "set_timer1" 1 304 ""
v L "value" 1 304 "int16" `163 
f B "set_timer1" 1 304 "void(int16 value)" `162  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 1 307 "0"
d G "T1_EXTERNAL" 1 308 "0x0003"
d G "T1_INTERNAL" 1 309 "0x0103"
d G "T1_FOSC" 1 310 "0x0203"
d G "T1_HFINTRC" 1 311 "0x0303"
d G "T1_LFINTRC" 1 312 "0x0403"
d G "T1_MFINTRC" 1 313 "0x0503"
d G "T1_SOSC" 1 314 "0x0603"
d G "T1_CLKREF" 1 315 "0x0703"
d G "T1_TIMER0" 1 316 "0x0803"
d G "T1_TIMER3" 1 317 "0x0A03"
d G "T1_TIMER5" 1 318 "0x0B03"
d G "T1_SYNC" 1 320 "0x04"
d G "T1_DIV_BY_1" 1 322 "0"
d G "T1_DIV_BY_2" 1 323 "0x10"
d G "T1_DIV_BY_4" 1 324 "0x20"
d G "T1_DIV_BY_8" 1 325 "0x30"
d G "T1_GATE" 1 327 "0x8000"
d G "T1_GATE_INVERTED" 1 328 "0xC000"
d G "T1_GATE_TOGGLE" 1 329 "0xA000"
d G "T1_GATE_SINGLE" 1 330 "0x9000"
d G "T1_GATE_TIMER0" 1 331 "0x018000"
d G "T1_GATE_TIMER2" 1 332 "0x038000"
d G "T1_GATE_TIMER3" 1 333 "0x048000"
d G "T1_GATE_TIMER4" 1 334 "0x058000"
d G "T1_GATE_TIMER5" 1 335 "0x068000"
d G "T1_GATE_TIMER6" 1 336 "0x078000"
d G "T1_GATE_CCP1" 1 337 "0x088000"
d G "T1_GATE_CCP2" 1 338 "0x098000"
d G "T1_GATE_PWM3" 1 339 "0x0A8000"
d G "T1_GATE_PWM4" 1 340 "0x0B8000"
d G "T1_GATE_COMP1" 1 341 "0x0C8000"
d G "T1_GATE_COMP2" 1 342 "0x0D8000"
d G "T1_GATE_ZCD" 1 343 "0x0E8000"
c L "set_timer1" 1 3 3 "FUNCTION"
f N "setup_timer_2" 1 348 ""
v L "mode" 1 348 "int32" `165 
v L "period" 1 348 "int8" `166 
v L "postscaler" 1 348 "int8" `167 
f B "setup_timer_2" 1 348 "void(int32 mode,int8 period,int8 postscaler)" `164 
f N "get_timer2" 1 349 ""
f B "get_timer2" 1 349 "int8()" `168 
f N "set_timer2" 1 350 ""
v L "value" 1 350 "int8" `170 
f B "set_timer2" 1 350 "void(int8 value)" `169  "Constants used for SETUP_TIMER_2() are:"
d G "T2_DISABLED" 1 352 "0"
d G "T2_DIV_BY_1" 1 353 "0x80"
d G "T2_DIV_BY_2" 1 354 "0x90"
d G "T2_DIV_BY_4" 1 355 "0xA0"
d G "T2_DIV_BY_8" 1 356 "0xB0"
d G "T2_DIV_BY_16" 1 357 "0xC0"
d G "T2_DIV_BY_32" 1 358 "0xD0"
d G "T2_DIV_BY_64" 1 359 "0xE0"
d G "T2_DIV_BY_128" 1 360 "0xF0"
d G "T2_CLK_T2IN" 1 362 "0"
d G "T2_CLK_INTERNAL" 1 363 "0x0100"
d G "T2_CLK_FOSC" 1 364 "0x0200"
d G "T2_CLK_HFINTRC" 1 365 "0x0300"
d G "T2_CLK_LFINTRC" 1 366 "0x0400"
d G "T2_CLK_MFINTRC" 1 367 "0x0500"
d G "T2_CLK_SOSC" 1 368 "0x0600"
d G "T2_CLK_CLKR" 1 369 "0x0700"
d G "T2_CLK_ZCD" 1 370 "0x0800"
d G "T2_START_IMMEDIATELY" 1 373 "0"
d G "T2_START_WHEN_HIGH" 1 374 "0x010000"
d G "T2_START_WHEN_LOW" 1 375 "0x020000"
d G "T2_RESET_ON_BOTH_EDGES" 1 376 "0x030000"
d G "T2_RESET_ON_RE" 1 377 "0x040000"
d G "T2_RESET_ON_FE" 1 378 "0x050000"
d G "T2_RESET_WHEN_LOW" 1 379 "0x060000"
d G "T2_RESET_WHEN_HIGH" 1 380 "0x070000"
d G "T2_ONE_SHOT_START_IMMEDIATELY" 1 381 "0x080000"
d G "T2_ONE_SHOT_START_ON_RE" 1 382 "0x090000"
d G "T2_ONE_SHOT_START_ON_FE" 1 383 "0x0A0000"
d G "T2_ONE_SHOT_START_ON_BOTH_EDGES" 1 384 "0x0B0000"
d G "T2_ONE_SHOT_START_ON_RE_RESET_ON_RE" 1 385 "0x0C0000" "starts on first rising edge, resets on subsequent rising edges"
d G "T2_ONE_SHOT_START_ON_FE_RESET_ON_FE" 1 386 "0x0D0000" "starts on first falling edge, resets on subsequent falling edges"
d G "T2_ONE_SHOT_START_ON_RE_RESET_WHEN_LOW" 1 387 "0x0E0000"
d G "T2_ONE_SHOT_START_ON_FE_RESET_WHEN_HIGH" 1 388 "0x0F0000"
d G "T2_MONO_STABLE_START_ON_RE" 1 389 "0x110000"
d G "T2_MONO_STABLE_START_ON_FE" 1 390 "0x120000"
d G "T2_MONO_STABLE_START_ON_EE" 1 391 "0x130000"
d G "T2_ONE_SHOT_START_WHEN_HIGH_RESET_WHEN_LOW" 1 392 "0x160000"
d G "T2_ONE_SHOT_START_WHEN_LOW_RESET_WHEN_HIGH" 1 393 "0x170000"
d G "T2_SYNC_ON_WITH_T2CLK" 1 395 "0x200000"
d G "T2_INVERTED" 1 396 "0x400000"
d G "T2_SYNC_PRESCALER_WITH_CLK" 1 397 "0x800000"
d G "T2_RESET_FROM_T2IN" 1 400 "0"
d G "T2_RESET_FROM_TMR4" 1 401 "0x02000000"
d G "T2_RESET_FROM_TMR6" 1 402 "0x03000000"
d G "T2_RESET_FROM_CCP1" 1 403 "0x04000000"
d G "T2_RESET_FROM_CCP2" 1 404 "0x05000000"
d G "T2_RESET_FROM_PWM3" 1 405 "0x06000000"
d G "T2_RESET_FROM_PWM4" 1 406 "0x07000000"
d G "T2_RESET_FROM_C1OUT" 1 407 "0x08000000"
d G "T2_RESET_FROM_C2OUT" 1 408 "0x09000000"
d G "T2_RESET_FROM_ZCD" 1 409 "0x0A000000"
c L "set_timer2" 1 3 3 "FUNCTION"
f N "setup_timer_3" 1 414 ""
v L "mode" 1 414 "int32" `172 
f B "setup_timer_3" 1 414 "void(int32 mode)" `171 
f N "get_timer3" 1 415 ""
f B "get_timer3" 1 415 "int16()" `173 
f N "set_timer3" 1 416 ""
v L "value" 1 416 "int16" `175 
f B "set_timer3" 1 416 "void(int16 value)" `174  "Constants used for SETUP_TIMER_3() are:"
d G "T3_DISABLED" 1 419 "0"
d G "T3_EXTERNAL" 1 420 "0x0003"
d G "T3_INTERNAL" 1 421 "0x0103"
d G "T3_FOSC" 1 422 "0x0203"
d G "T3_HFINTRC" 1 423 "0x0303"
d G "T3_LFINTRC" 1 424 "0x0403"
d G "T3_MFINTRC" 1 425 "0x0503"
d G "T3_SOSC" 1 426 "0x0603"
d G "T3_CLKREF" 1 427 "0x0703"
d G "T3_TIMER0" 1 428 "0x0803"
d G "T3_TIMER1" 1 429 "0x0903"
d G "T3_TIMER5" 1 430 "0x0B03"
d G "T3_SYNC" 1 432 "0x04"
d G "T3_DIV_BY_1" 1 434 "0"
d G "T3_DIV_BY_2" 1 435 "0x10"
d G "T3_DIV_BY_4" 1 436 "0x20"
d G "T3_DIV_BY_8" 1 437 "0x30"
d G "T3_GATE" 1 439 "0x8000"
d G "T3_GATE_INVERTED" 1 440 "0xC000"
d G "T3_GATE_TOGGLE" 1 441 "0xA000"
d G "T3_GATE_SINGLE" 1 442 "0x9000"
d G "T3_GATE_TIMER0" 1 443 "0x018000"
d G "T3_GATE_TIMER1" 1 444 "0x028000"
d G "T3_GATE_TIMER2" 1 445 "0x038000"
d G "T3_GATE_TIMER4" 1 446 "0x058000"
d G "T3_GATE_TIMER5" 1 447 "0x068000"
d G "T3_GATE_TIMER6" 1 448 "0x078000"
d G "T3_GATE_CCP1" 1 449 "0x088000"
d G "T3_GATE_CCP2" 1 450 "0x098000"
d G "T3_GATE_PWM3" 1 451 "0x0A8000"
d G "T3_GATE_PWM4" 1 452 "0x0B8000"
d G "T3_GATE_COMP1" 1 453 "0x0C8000"
d G "T3_GATE_COMP2" 1 454 "0x0D8000"
d G "T3_GATE_ZCD" 1 455 "0x0E8000"
c L "set_timer3" 1 3 3 "FUNCTION"
f N "setup_timer_4" 1 460 ""
v L "mode" 1 460 "int32" `177 
v L "period" 1 460 "int8" `178 
v L "postscaler" 1 460 "int8" `179 
f B "setup_timer_4" 1 460 "void(int32 mode,int8 period,int8 postscaler)" `176 
f N "get_timer4" 1 461 ""
f B "get_timer4" 1 461 "int8()" `180 
f N "set_timer4" 1 462 ""
v L "value" 1 462 "int8" `182 
f B "set_timer4" 1 462 "void(int8 value)" `181  "Constants used for SETUP_TIMER_4() are:"
d G "T4_DISABLED" 1 464 "0"
d G "T4_DIV_BY_1" 1 465 "0x80"
d G "T4_DIV_BY_2" 1 466 "0x90"
d G "T4_DIV_BY_4" 1 467 "0xA0"
d G "T4_DIV_BY_8" 1 468 "0xB0"
d G "T4_DIV_BY_16" 1 469 "0xC0"
d G "T4_DIV_BY_32" 1 470 "0xD0"
d G "T4_DIV_BY_64" 1 471 "0xE0"
d G "T4_DIV_BY_128" 1 472 "0xF0"
d G "T4_CLK_T4IN" 1 474 "0"
d G "T4_CLK_INTERNAL" 1 475 "0x0100"
d G "T4_CLK_FOSC" 1 476 "0x0200"
d G "T4_CLK_HFINTRC" 1 477 "0x0300"
d G "T4_CLK_LFINTRC" 1 478 "0x0400"
d G "T4_CLK_MFINTRC" 1 479 "0x0500"
d G "T4_CLK_SOSC" 1 480 "0x0600"
d G "T4_CLK_CLKR" 1 481 "0x0700"
d G "T4_CLK_ZCD" 1 482 "0x0800"
d G "T4_START_IMMEDIATELY" 1 485 "0"
d G "T4_START_WHEN_HIGH" 1 486 "0x010000"
d G "T4_START_WHEN_LOW" 1 487 "0x020000"
d G "T4_RESET_ON_BOTH_EDGES" 1 488 "0x030000"
d G "T4_RESET_ON_RE" 1 489 "0x040000"
d G "T4_RESET_ON_FE" 1 490 "0x050000"
d G "T4_RESET_WHEN_LOW" 1 491 "0x060000"
d G "T4_RESET_WHEN_HIGH" 1 492 "0x070000"
d G "T4_ONE_SHOT_START_IMMEDIATELY" 1 493 "0x080000"
d G "T4_ONE_SHOT_START_ON_RE" 1 494 "0x090000"
d G "T4_ONE_SHOT_START_ON_FE" 1 495 "0x0A0000"
d G "T4_ONE_SHOT_START_ON_BOTH_EDGES" 1 496 "0x0B0000"
d G "T4_ONE_SHOT_START_ON_RE_RESET_ON_RE" 1 497 "0x0C0000" "starts on first rising edge, resets on subsequent rising edges"
d G "T4_ONE_SHOT_START_ON_FE_RESET_ON_FE" 1 498 "0x0D0000" "starts on first falling edge, resets on subsequent falling edges"
d G "T4_ONE_SHOT_START_ON_RE_RESET_WHEN_LOW" 1 499 "0x0E0000"
d G "T4_ONE_SHOT_START_ON_FE_RESET_WHEN_HIGH" 1 500 "0x0F0000"
d G "T4_MONO_STABLE_START_ON_RE" 1 501 "0x110000"
d G "T4_MONO_STABLE_START_ON_FE" 1 502 "0x120000"
d G "T4_MONO_STABLE_START_ON_EE" 1 503 "0x130000"
d G "T4_ONE_SHOT_START_WHEN_HIGH_RESET_WHEN_LOW" 1 504 "0x160000"
d G "T4_ONE_SHOT_START_WHEN_LOW_RESET_WHEN_HIGH" 1 505 "0x170000"
d G "T4_SYNC_ON_WITH_T2CLK" 1 508 "0x200000"
d G "T4_INVERTED" 1 509 "0x400000"
d G "T4_SYNC_PRESCALER_WITH_CLK" 1 510 "0x800000"
d G "T4_RESET_FROM_T4IN" 1 513 "0"
d G "T4_RESET_FROM_TMR2" 1 514 "0x01000000"
d G "T4_RESET_FROM_TMR6" 1 515 "0x03000000"
d G "T4_RESET_FROM_CCP1" 1 516 "0x04000000"
d G "T4_RESET_FROM_CCP2" 1 517 "0x05000000"
d G "T4_RESET_FROM_PWM3" 1 518 "0x06000000"
d G "T4_RESET_FROM_PWM4" 1 519 "0x07000000"
d G "T4_RESET_FROM_C1OUT" 1 520 "0x08000000"
d G "T4_RESET_FROM_C2OUT" 1 521 "0x09000000"
d G "T4_RESET_FROM_ZCD" 1 522 "0x0A000000"
c L "set_timer4" 1 3 3 "FUNCTION"
f N "setup_timer_5" 1 527 ""
v L "mode" 1 527 "int32" `184 
f B "setup_timer_5" 1 527 "void(int32 mode)" `183 
f N "get_timer5" 1 528 ""
f B "get_timer5" 1 528 "int16()" `185 
f N "set_timer5" 1 529 ""
v L "value" 1 529 "int16" `187 
f B "set_timer5" 1 529 "void(int16 value)" `186  "Constants used for SETUP_TIMER_5() are:"
d G "T5_DISABLED" 1 532 "0"
d G "T5_EXTERNAL" 1 533 "0x0003"
d G "T5_INTERNAL" 1 534 "0x0103"
d G "T5_FOSC" 1 535 "0x0203"
d G "T5_HFINTRC" 1 536 "0x0303"
d G "T5_LFINTRC" 1 537 "0x0403"
d G "T5_MFINTRC" 1 538 "0x0503"
d G "T5_SOSC" 1 539 "0x0603"
d G "T5_CLKREF" 1 540 "0x0703"
d G "T5_TIMER0" 1 541 "0x0803"
d G "T5_TIMER1" 1 542 "0x0903"
d G "T5_TIMER3" 1 543 "0x0A03"
d G "T5_SYNC" 1 545 "0x04"
d G "T5_DIV_BY_1" 1 547 "0"
d G "T5_DIV_BY_2" 1 548 "0x10"
d G "T5_DIV_BY_4" 1 549 "0x20"
d G "T5_DIV_BY_8" 1 550 "0x30"
d G "T5_GATE" 1 552 "0x8000"
d G "T5_GATE_INVERTED" 1 553 "0xC000"
d G "T5_GATE_TOGGLE" 1 554 "0xA000"
d G "T5_GATE_SINGLE" 1 555 "0x9000"
d G "T5_GATE_TIMER0" 1 556 "0x018000"
d G "T5_GATE_TIMER1" 1 557 "0x028000"
d G "T5_GATE_TIMER2" 1 558 "0x038000"
d G "T5_GATE_TIMER3" 1 559 "0x048000"
d G "T5_GATE_TIMER4" 1 560 "0x058000"
d G "T5_GATE_TIMER6" 1 561 "0x078000"
d G "T5_GATE_CCP1" 1 562 "0x088000"
d G "T5_GATE_CCP2" 1 563 "0x098000"
d G "T5_GATE_PWM3" 1 564 "0x0A8000"
d G "T5_GATE_PWM4" 1 565 "0x0B8000"
d G "T5_GATE_COMP1" 1 566 "0x0C8000"
d G "T5_GATE_COMP2" 1 567 "0x0D8000"
d G "T5_GATE_ZCD" 1 568 "0x0E8000"
c L "set_timer5" 1 3 3 "FUNCTION"
f N "setup_timer_6" 1 573 ""
v L "mode" 1 573 "int32" `189 
v L "period" 1 573 "int8" `190 
v L "postscaler" 1 573 "int8" `191 
f B "setup_timer_6" 1 573 "void(int32 mode,int8 period,int8 postscaler)" `188 
f N "get_timer6" 1 574 ""
f B "get_timer6" 1 574 "int8()" `192 
f N "set_timer6" 1 575 ""
v L "value" 1 575 "int8" `194 
f B "set_timer6" 1 575 "void(int8 value)" `193  "Constants used for SETUP_TIMER_6() are:"
d G "T6_DISABLED" 1 577 "0"
d G "T6_DIV_BY_1" 1 578 "0x80"
d G "T6_DIV_BY_2" 1 579 "0x90"
d G "T6_DIV_BY_4" 1 580 "0xA0"
d G "T6_DIV_BY_8" 1 581 "0xB0"
d G "T6_DIV_BY_16" 1 582 "0xC0"
d G "T6_DIV_BY_32" 1 583 "0xD0"
d G "T6_DIV_BY_64" 1 584 "0xE0"
d G "T6_DIV_BY_128" 1 585 "0xF0"
d G "T6_CLK_T6IN" 1 587 "0"
d G "T6_CLK_INTERNAL" 1 588 "0x0100"
d G "T6_CLK_FOSC" 1 589 "0x0200"
d G "T6_CLK_HFINTRC" 1 590 "0x0300"
d G "T6_CLK_LFINTRC" 1 591 "0x0400"
d G "T6_CLK_MFINTRC" 1 592 "0x0500"
d G "T6_CLK_SOSC" 1 593 "0x0600"
d G "T6_CLK_CLKR" 1 594 "0x0700"
d G "T6_CLK_ZCD" 1 595 "0x0800"
d G "T6_START_IMMEDIATELY" 1 598 "0"
d G "T6_START_WHEN_HIGH" 1 599 "0x010000"
d G "T6_START_WHEN_LOW" 1 600 "0x020000"
d G "T6_RESET_ON_BOTH_EDGES" 1 601 "0x030000"
d G "T6_RESET_ON_RE" 1 602 "0x040000"
d G "T6_RESET_ON_FE" 1 603 "0x050000"
d G "T6_RESET_WHEN_LOW" 1 604 "0x060000"
d G "T6_RESET_WHEN_HIGH" 1 605 "0x070000"
d G "T6_ONE_SHOT_START_IMMEDIATELY" 1 606 "0x080000"
d G "T6_ONE_SHOT_START_ON_RE" 1 607 "0x090000"
d G "T6_ONE_SHOT_START_ON_FE" 1 608 "0x0A0000"
d G "T6_ONE_SHOT_START_ON_BOTH_EDGES" 1 609 "0x0B0000"
d G "T6_ONE_SHOT_START_ON_RE_RESET_ON_RE" 1 610 "0x0C0000" "starts on first rising edge, resets on subsequent rising edges"
d G "T6_ONE_SHOT_START_ON_FE_RESET_ON_FE" 1 611 "0x0D0000" "starts on first falling edge, resets on subsequent falling edges"
d G "T6_ONE_SHOT_START_ON_RE_RESET_WHEN_LOW" 1 612 "0x0E0000"
d G "T6_ONE_SHOT_START_ON_FE_RESET_WHEN_HIGH" 1 613 "0x0F0000"
d G "T6_MONO_STABLE_START_ON_RE" 1 614 "0x110000"
d G "T6_MONO_STABLE_START_ON_FE" 1 615 "0x120000"
d G "T6_MONO_STABLE_START_ON_EE" 1 616 "0x130000"
d G "T6_ONE_SHOT_START_WHEN_HIGH_RESET_WHEN_LOW" 1 617 "0x160000"
d G "T6_ONE_SHOT_START_WHEN_LOW_RESET_WHEN_HIGH" 1 618 "0x170000"
d G "T6_SYNC_ON_WITH_T2CLK" 1 620 "0x200000"
d G "T6_INVERTED" 1 621 "0x400000"
d G "T6_SYNC_PRESCALER_WITH_CLK" 1 622 "0x800000"
d G "T6_RESET_FROM_T6IN" 1 625 "0"
d G "T6_RESET_FROM_TMR2" 1 626 "0x01000000"
d G "T6_RESET_FROM_TMR4" 1 627 "0x02000000"
d G "T6_RESET_FROM_CCP1" 1 628 "0x04000000"
d G "T6_RESET_FROM_CCP2" 1 629 "0x05000000"
d G "T6_RESET_FROM_PWM3" 1 630 "0x06000000"
d G "T6_RESET_FROM_PWM4" 1 631 "0x07000000"
d G "T6_RESET_FROM_C1OUT" 1 632 "0x08000000"
d G "T6_RESET_FROM_C2OUT" 1 633 "0x09000000"
d G "T6_RESET_FROM_ZCD" 1 634 "0x0A000000"
c L "set_timer6" 1 3 4 "FUNCTION"
f N "setup_ccp1" 1 640 ""
v L "mode" 1 640 "int32" `196 
f B "setup_ccp1" 1 640 "void(int32 mode)" `195 
f N "setup_ccp1" 1 641 ""
v L "mode" 1 641 "int32" `198 
v L "pwm" 1 641 "int8" `199 
f B "setup_ccp1" 1 641 "void(int32 mode,int8 pwm)" `197 
f N "set_pwm1_duty" 1 642 ""
v L "value" 1 642 "int16" `201 
f B "set_pwm1_duty" 1 642 "void(int16 value)" `200  "Constants used for SETUP_CCPx() are:"
d G "CCP_OFF" 1 644 "0"
d G "CCP_CAPTURE_EE" 1 645 "0x03"
d G "CCP_CAPTURE_FE" 1 646 "0x04"
d G "CCP_CAPTURE_RE" 1 647 "0x05"
d G "CCP_CAPTURE_DIV_4" 1 648 "0x06"
d G "CCP_CAPTURE_DIV_16" 1 649 "0x07"
d G "CCP_COMPARE_TOGGLE_RESET_TIMER" 1 650 "0x01"
d G "CCP_COMPARE_TOGGLE" 1 651 "0x02"
d G "CCP_COMPARE_SET_ON_MATCH" 1 652 "0x08"
d G "CCP_COMPARE_CLR_ON_MATCH" 1 653 "0x09"
d G "CCP_COMPARE_PULSE" 1 654 "0x0A"
d G "CCP_COMPARE_PULSE_RESET_TIMER" 1 655 "0x0B"
d G "CCP_PWM" 1 656 "0x0C"
d G "CCP_CAPTURE_INPUT_CCP_PIN" 1 658 "0"
d G "CCP_CAPTURE_INPUT_C1OUT" 1 659 "0x010000"
d G "CCP_CAPTURE_INPUT_C2OUT" 1 660 "0x020000"
d G "CCP_CAPTURE_INPUT_IOC_INTERRUPT" 1 661 "0x030000"
d G "CCP_PWM_LEFT_JUSTIFIED_DUTY" 1 663 "0x10"
d G "CCP_USE_TIMER1_AND_TIMER2" 1 672 "0x0000"
d G "CCP_USE_TIMER3_AND_TIMER4" 1 673 "0x0100"
d G "CCP_USE_TIMER5_AND_TIMER6" 1 674 "0x0200"
c L "set_pwm1_duty" 1 3 1 "FUNCTION"
f N "setup_ccp2" 1 677 ""
v L "mode" 1 677 "int32" `206 
f B "setup_ccp2" 1 677 "void(int32 mode)" `205 
f N "setup_ccp2" 1 678 ""
v L "mode" 1 678 "int32" `208 
v L "pwm" 1 678 "int8" `209 
f B "setup_ccp2" 1 678 "void(int32 mode,int8 pwm)" `207 
f N "set_pwm2_duty" 1 679 ""
v L "value" 1 679 "int16" `211 
f B "set_pwm2_duty" 1 679 "void(int16 value)" `210 
c L "set_pwm2_duty" 1 3 3 "FUNCTION"
f N "setup_pwm3" 1 687 ""
v L "mode" 1 687 "int16" `216 
f B "setup_pwm3" 1 687 "void(int16 mode)" `215 
f N "set_pwm3_duty" 1 688 ""
v L "value" 1 688 "int16" `218 
f B "set_pwm3_duty" 1 688 "void(int16 value)" `217 
f N "setup_pwm4" 1 689 ""
v L "mode" 1 689 "int16" `220 
f B "setup_pwm4" 1 689 "void(int16 mode)" `219 
f N "set_pwm4_duty" 1 690 ""
v L "value" 1 690 "int16" `222 
f B "set_pwm4_duty" 1 690 "void(int16 value)" `221  "Constants used for SETUP_PWMx() are:"
d G "PWM_ENABLED" 1 692 "0x80"
d G "PWM_DISABLED" 1 693 "0x0400"
d G "PWM_ACTIVE_LOW" 1 695 "0x10"
d G "PWM_ACTIVE_HIGH" 1 696 "0"
d G "PWM_TIMER2" 1 699 "0x0000"
d G "PWM_TIMER4" 1 700 "0x0100"
d G "PWM_TIMER6" 1 701 "0x0200"
c L "set_pwm4_duty" 1 3 3 "FUNCTION"
f N "setup_spi" 1 709 ""
v L "mode" 1 709 "int32" `226 
f B "setup_spi" 1 709 "void(int32 mode)" `225 
f N "spi_write" 1 710 ""
v L "value" 1 710 "int8" `228 
f B "spi_write" 1 710 "void(int8 value)" `227 
f N "spi_read" 1 711 ""
f B "spi_read" 1 711 "int8()" `229 
f N "spi_read" 1 712 ""
v L "value" 1 712 "int8" `231 
f B "spi_read" 1 712 "int8(int8 value)" `230 
f N "spi_data_is_in" 1 713 ""
f B "spi_data_is_in" 1 713 "int8()" `232 
f N "setup_spi2" 1 714 ""
v L "mode" 1 714 "int32" `234 
f B "setup_spi2" 1 714 "void(int32 mode)" `233 
f N "spi_write2" 1 715 ""
v L "value" 1 715 "int8" `236 
f B "spi_write2" 1 715 "void(int8 value)" `235 
f N "spi_read2" 1 716 ""
f B "spi_read2" 1 716 "int8()" `237 
f N "spi_read2" 1 717 ""
v L "value" 1 717 "int8" `239 
f B "spi_read2" 1 717 "int8(int8 value)" `238 
f N "spi_data_is_in2" 1 718 ""
f B "spi_data_is_in2" 1 718 "int8()" `240  "Constants used in SETUP_SPI() are:"
d G "SPI_DISABLED" 1 720 "0x00"
d G "SPI_MASTER" 1 721 "0x20"
d G "SPI_SLAVE" 1 722 "0x24"
d G "SPI_SCK_IDLE_HIGH" 1 723 "0x10"
d G "SPI_SCK_IDLE_LOW" 1 724 "0x00"
d G "SPI_CLK_DIV_4" 1 725 "0x00"
d G "SPI_CLK_DIV_16" 1 726 "0x01"
d G "SPI_CLK_DIV_64" 1 727 "0x02"
d G "SPI_CLK_T2" 1 728 "0x03"
d G "SPI_SS_DISABLED" 1 729 "0x01"
d G "SPI_XMIT_L_TO_H" 1 731 "0x4000"
d G "SPI_XMIT_H_TO_L" 1 732 "0x0000"
d G "SPI_SAMPLE_AT_MIDDLE" 1 734 "0x0000"
d G "SPI_SAMPLE_AT_END" 1 735 "0x8000"
d G "SPI_L_TO_H" 1 738 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 1 739 "SPI_SCK_IDLE_HIGH"
c L "spi_data_is_in2" 1 3 2 "FUNCTION"
f N "setup_uart" 1 743 ""
v L "baud" 1 743 "int32" `242 
f B "setup_uart" 1 743 "void(int32 baud)" `241 
f N "setup_uart" 1 744 ""
v L "baud" 1 744 "int32" `244 
v L "stream" 1 744 "int8" `245 
f B "setup_uart" 1 744 "void(int32 baud,int8 stream)" `243 
f N "setup_uart" 1 745 ""
v L "baud" 1 745 "int32" `247 
v L "stream" 1 745 "int8" `248 
v L "clock" 1 745 "int32" `249 
f B "setup_uart" 1 745 "void(int32 baud,int8 stream,int32 clock)" `246 
f N "set_uart_speed" 1 746 ""
v L "baud" 1 746 "int32" `251 
f B "set_uart_speed" 1 746 "void(int32 baud)" `250 
f N "set_uart_speed" 1 747 ""
v L "baud" 1 747 "int32" `253 
v L "stream" 1 747 "int8" `254 
f B "set_uart_speed" 1 747 "void(int32 baud,int8 stream)" `252 
f N "set_uart_speed" 1 748 ""
v L "baud" 1 748 "int32" `256 
v L "stream" 1 748 "int8" `257 
v L "clock" 1 748 "int32" `258 
f B "set_uart_speed" 1 748 "void(int32 baud,int8 stream,int32 clock)" `255  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 1 752 "2"
d G "UART_DATA" 1 753 "4"
d G "UART_AUTODETECT" 1 754 "8"
d G "UART_AUTODETECT_NOWAIT" 1 755 "9"
d G "UART_WAKEUP_ON_RDA" 1 756 "10"
d G "UART_SEND_BREAK" 1 757 "13"
c L "set_uart_speed" 1 3 3 "FUNCTION"
f N "setup_comparator" 1 762 ""
v L "mode" 1 762 "int32" `260 
f B "setup_comparator" 1 762 "void(int32 mode)" `259  "Constants used in setup_comparator() are:"
d G "NC_NC_NC_NC" 1 765 "0x003F003F"
d G "CP1_A0_A2" 1 768 "0x8000"
d G "CP1_A1_A2" 1 769 "0x8001"
d G "CP1_B3_A2" 1 770 "0x8002"
d G "CP1_B1_A2" 1 771 "0x8003"
d G "CP1_FVR_A2" 1 772 "0x8006"
d G "CP1_VSS_A2" 1 773 "0x8007"
d G "CP1_A0_A3" 1 774 "0x8008"
d G "CP1_A1_A3" 1 775 "0x8009"
d G "CP1_B3_A3" 1 776 "0x800A"
d G "CP1_B1_A3" 1 777 "0x800B"
d G "CP1_FVR_A3" 1 778 "0x800E"
d G "CP1_VSS_A3" 1 779 "0x800F"
d G "CP1_A0_DAC" 1 780 "0x8028"
d G "CP1_A1_DAC" 1 781 "0x8029"
d G "CP1_B3_DAC" 1 782 "0x802A"
d G "CP1_B1_DAC" 1 783 "0x802B"
d G "CP1_FVR_DAC" 1 784 "0x802E"
d G "CP1_VSS_DAC" 1 785 "0x802F"
d G "CP1_A0_FVR" 1 786 "0x8030"
d G "CP1_A1_FVR" 1 787 "0x8031"
d G "CP1_B3_FVR" 1 788 "0x8032"
d G "CP1_B1_FVR" 1 789 "0x8033"
d G "CP1_FVR_FVR" 1 790 "0x8036"
d G "CP1_VSS_FVR" 1 791 "0x8037"
d G "CP1_A0_VSS" 1 792 "0x8038"
d G "CP1_A1_VSS" 1 793 "0x8039"
d G "CP1_B3_VSS" 1 794 "0x803A"
d G "CP1_B1_VSS" 1 795 "0x803B"
d G "CP1_FVR_VSS" 1 796 "0x803E"
d G "CP1_VSS_VSS" 1 797 "0x803F"
d G "CP1_INT_L2H" 1 799 "0x0080"
d G "CP1_INT_H2L" 1 800 "0x0040"
d G "CP1_INVERT" 1 801 "0x1000"
d G "CP1_HYST" 1 802 "0x0200"
d G "CP1_SYNC" 1 803 "0x0100"
d G "CP2_A0_A2" 1 806 "0x80000000"
d G "CP2_A1_A2" 1 807 "0x80010000"
d G "CP2_B3_A2" 1 808 "0x80020000"
d G "CP2_B1_A2" 1 809 "0x80030000"
d G "CP2_FVR_A2" 1 810 "0x80060000"
d G "CP2_VSS_A2" 1 811 "0x80070000"
d G "CP2_A0_B0" 1 812 "0x80080000"
d G "CP2_A1_B0" 1 813 "0x80090000"
d G "CP2_B3_B0" 1 814 "0x800A0000"
d G "CP2_B1_B0" 1 815 "0x800B0000"
d G "CP2_FVR_B0" 1 816 "0x800E0000"
d G "CP2_VSS_B0" 1 817 "0x800F0000"
d G "CP2_A0_DAC" 1 818 "0x80280000"
d G "CP2_A1_DAC" 1 819 "0x80290000"
d G "CP2_B3_DAC" 1 820 "0x802A0000"
d G "CP2_B1_DAC" 1 821 "0x802B0000"
d G "CP2_FVR_DAC" 1 822 "0x802E0000"
d G "CP2_VSS_DAC" 1 823 "0x802F0000"
d G "CP2_A0_FVR" 1 824 "0x80300000"
d G "CP2_A1_FVR" 1 825 "0x80310000"
d G "CP2_B3_FVR" 1 826 "0x80320000"
d G "CP2_B1_FVR" 1 827 "0x80330000"
d G "CP2_FVR_FVR" 1 828 "0x80360000"
d G "CP2_VSS_FVR" 1 829 "0x80370000"
d G "CP2_A0_VSS" 1 830 "0x80380000"
d G "CP2_A1_VSS" 1 831 "0x80390000"
d G "CP2_B3_VSS" 1 832 "0x803A0000"
d G "CP2_B1_VSS" 1 833 "0x803B0000"
d G "CP2_FVR_VSS" 1 834 "0x803E0000"
d G "CP2_VSS_VSS" 1 835 "0x803F0000"
d G "CP2_INT_L2H" 1 837 "0x00800000"
d G "CP2_INT_H2L" 1 838 "0x00400000"
d G "CP2_INVERT" 1 839 "0x10000000"
d G "CP2_HYST" 1 840 "0x02000000"
d G "CP2_SYNC" 1 841 "0x01000000"
c L "setup_comparator" 1 3 2 "FUNCTION"
f N "setup_vref" 1 848 ""
v L "mode" 1 848 "int8" `264 
f B "setup_vref" 1 848 "void(int8 mode)" `263  "Constants used in setup_vref() are:"
d G "VREF_OFF" 1 850 "0"
d G "VREF_ON" 1 851 "0x80"
d G "VREF_ADC_OFF" 1 853 "0"
d G "VREF_ADC_1v024" 1 854 "0x81"
d G "VREF_ADC_2v048" 1 855 "0x82"
d G "VREF_ADC_4v096" 1 856 "0x83"
d G "VREF_COMP_DAC_OFF" 1 858 "0"
d G "VREF_COMP_DAC_1v024" 1 859 "0x84"
d G "VREF_COMP_DAC_2v048" 1 860 "0x88"
d G "VREF_COMP_DAC_4v096" 1 861 "0x8C"
d G "TEMPERATURE_INDICATOR_DISABLED" 1 863 "0"
d G "TEMPERATURE_INDICATOR_ENABLED" 1 864 "0x20"
d G "TEMPERATURE_RANGE_LOW" 1 865 "0"
d G "TEMPERATURE_RANGE_HIGH" 1 866 "0x10"
c L "setup_vref" 1 3 2 "FUNCTION"
f N "setup_low_volt_detect" 1 870 ""
v L "mode" 1 870 "int8" `266 
f B "setup_low_volt_detect" 1 870 "void(int8 mode)" `265  "Constants used in setup_low_volt_detect() are:"
d G "LVD_46" 1 872 "0x8E"
d G "LVD_43" 1 873 "0x8D"
d G "LVD_41" 1 874 "0x8C"
d G "LVD_39" 1 875 "0x8B"
d G "LVD_37" 1 876 "0x8A"
d G "LVD_36" 1 877 "0x89"
d G "LVD_34" 1 878 "0x88"
d G "LVD_30" 1 879 "0x87"
d G "LVD_28" 1 880 "0x86"
d G "LVD_27" 1 881 "0x85"
d G "LVD_25" 1 882 "0x84"
d G "LVD_24" 1 883 "0x83"
d G "LVD_22" 1 884 "0x82"
d G "LVD_20" 1 885 "0x81"
d G "LVD_18" 1 886 "0x80"
d G "LVD_INT_WHEN_BELOW" 1 888 "0x10"
d G "LVD_INT_WHEN_ABOVE" 1 889 "0x20"
c L "setup_low_volt_detect" 1 3 3 "FUNCTION"
f N "setup_dac" 1 897 ""
v L "mode" 1 897 "int8" `270 
f B "setup_dac" 1 897 "void(int8 mode)" `269 
f N "dac_write" 1 898 ""
v L "value" 1 898 "int8" `272 
f B "dac_write" 1 898 "void(int8 value)" `271  "Constants used in SETUP_DAC() are:"
d G "DAC_OFF" 1 900 "0"
d G "DAC_VSS_VDD" 1 901 "0x80"
d G "DAC_VREF_VDD" 1 902 "0x81"
d G "DAC_VSS_VREF" 1 903 "0x84"
d G "DAC_VREF_VREF" 1 904 "0x85"
d G "DAC_VSS_FVR" 1 905 "0x88"
d G "DAC_VREF_FVR" 1 906 "0x89"
d G "DAC_OUTPUT2" 1 908 "0x10"
d G "DAC_OUTPUT" 1 909 "0x20"
c L "dac_write" 1 3 3 "FUNCTION"
f N "setup_cwg" 1 914 ""
v L "mode" 1 914 "int32" `274 
v L "shutdown" 1 914 "int16" `275 
v L "dt_rising" 1 914 "int8" `276 
v L "dt_falling" 1 914 "int8" `277 
f B "setup_cwg" 1 914 "void(int32 mode,int16 shutdown,int8 dt_rising,int8 dt_falling)" `273 
f N "cwg_restart" 1 915 ""
f B "cwg_restart" 1 915 "void()" `278 
f N "cwg_status" 1 916 ""
f B "cwg_status" 1 916 "int8()" `279  "Constants used in SETUP_CWG() first parameter are:"
d G "CWG_ENABLED" 1 919 "0x80"
d G "CWG_DISABLED" 1 920 "0x00"
d G "CWG_MODE_STEERING" 1 922 "0x00"
d G "CWG_MODE_SYNCRONOUS_STEERING" 1 923 "0x01"
d G "CWG_MODE_FULL_BRIDGE" 1 924 "0x02"
d G "CWG_MODE_FULL_BRIDGE_REV" 1 925 "0x03"
d G "CWG_MODE_HALF_BRIDGE" 1 926 "0x04"
d G "CWG_MODE_PUSH_PULL" 1 927 "0x05"
d G "CWG_CLOCK_HFINTOSC" 1 929 "0x0100"
d G "CWG_CLOCK_FOSC" 1 930 "0x0000"
d G "CWG_INPUT_CWG1IN" 1 932 "0x0000"
d G "CWG_INPUT_CCP1" 1 933 "0x1000"
d G "CWG_INPUT_CCP2" 1 934 "0x2000"
d G "CWG_INPUT_PWM3" 1 935 "0x3000"
d G "CWG_INPUT_PWM4" 1 936 "0x4000"
d G "CWG_INPUT_COMP1" 1 937 "0x5000"
d G "CWG_INPUT_COMP2" 1 938 "0x6000"
d G "CWG_INPUT_DSM" 1 939 "0x7000"
d G "CWG_A_INVERTED" 1 941 "0x010000"
d G "CWG_B_INVERTED" 1 942 "0x020000"
d G "CWG_C_INVERTED" 1 943 "0x040000"
d G "CWG_D_INVERTED" 1 944 "0x080000"
d G "CWG_A_FORCE_HIGH" 1 946 "0x10000000" "Only available in Steering modes"
d G "CWG_A_FORCE_LOW" 1 947 "0x00000000" "Only available in Steering modes"
d G "CWG_A_OUTPUT_PWM" 1 948 "0x01000000" "Only available in Steering modes"
d G "CWG_B_FORCE_HIGH" 1 950 "0x20000000" "Only available in Steering modes"
d G "CWG_B_FORCE_LOW" 1 951 "0x00000000" "Only available in Steering modes"
d G "CWG_B_OUTPUT_PWM" 1 952 "0x02000000" "Only available in Steering modes"
d G "CWG_C_FORCE_HIGH" 1 954 "0x40000000" "Only available in Steering modes"
d G "CWG_C_FORCE_LOW" 1 955 "0x00000000" "Only available in Steering modes"
d G "CWG_C_OUTPUT_PWM" 1 956 "0x04000000" "Only available in Steering modes"
d G "CWG_D_FORCE_HIGH" 1 958 "0x80000000" "Only available in Steering modes"
d G "CWG_D_FORCE_LOW" 1 959 "0x00000000" "Only available in Steering modes"
d G "CWG_D_OUTPUT_PWM" 1 960 "0x08000000" "Only available in Steering modes"
d G "CWG_NO_AUTO_SHUTDOWN" 1 965 "0x0000"
d G "CWG_SHUTDOWN_ON_CWG1IN" 1 966 "0x0001"
d G "CWG_SHUTDOWN_ON_COMP1" 1 967 "0x0002"
d G "CWG_SHUTDOWN_ON_COMP2" 1 968 "0x0004"
d G "CWG_SHUTDOWN_ON_TMR2" 1 969 "0x0010"
d G "CWG_SHUTDOWN_ON_TMR4" 1 970 "0x0020"
d G "CWG_SHUTDOWN_ON_TMR6" 1 971 "0x0040"
d G "CWG_SHUTDOWN_AC_INACTIVE_STATE" 1 973 "0x0000"
d G "CWG_SHUTDOWN_AC_TRISTATE" 1 974 "0x0400"
d G "CWG_SHUTDOWN_AC_LOW" 1 975 "0x0800"
d G "CWG_SHUTDOWN_AC_HIGH" 1 976 "0x0C00"
d G "CWG_SHUTDOWN_BD_INACTIVE_STATE" 1 978 "0"
d G "CWG_SHUTDOWN_BD_TRISTATE" 1 979 "0x1000"
d G "CWG_SHUTDOWN_BD_LOW" 1 980 "0x2000"
d G "CWG_SHUTDOWN_BD_HIGH" 1 981 "0x3000"
d G "CWG_AUTO_SHUTDOWN" 1 985 "0x80"
c L "cwg_status" 1 3 3 "FUNCTION"
f N "setup_zcd" 1 990 ""
v L "mode" 1 990 "int8" `281 
f B "setup_zcd" 1 990 "void(int8 mode)" `280 
f N "zcd_status" 1 991 ""
f B "zcd_status" 1 991 "int8()" `282  "Constants used in SETUP_ZCD() are:"
d G "ZCD_ENABLE" 1 993 "0x80"
d G "ZCD_DISABLE" 1 994 "0"
d G "ZCD_INVERTED" 1 996 "0x10"
d G "ZCD_INT_L_TO_H" 1 997 "0x02"
d G "ZCD_INT_H_TO_L" 1 998 "0x01"
d G "ZCD_IS_SINKING" 1 1001 "0x20" "If ZCD_INVERTED is used the return"
d G "ZCD_IS_SOURCING" 1 1002 "0" "value will be reversed."
c L "zcd_status" 1 3 3 "FUNCTION"
f N "setup_dsm" 1 1007 ""
v L "enable" 1 1007 "int8" `284 
f B "setup_dsm" 1 1007 "void(int8 enable)" `283 
f N "setup_dsm" 1 1008 ""
v L "mode" 1 1008 "int16" `286 
v L "source" 1 1008 "int8" `287 
f B "setup_dsm" 1 1008 "void(int16 mode,int8 source)" `285 
f N "setup_dsm" 1 1009 ""
v L "mode" 1 1009 "int16" `289 
v L "source" 1 1009 "int8" `290 
v L "carrier" 1 1009 "int16" `291 
f B "setup_dsm" 1 1009 "void(int16 mode,int8 source,int16 carrier)" `288  "Constants used in SETUP_DSM() first parameter are:"
d G "DSM_ENABLED" 1 1011 "0x80"
d G "DSM_DISABLED" 1 1012 "0x00"
d G "DSM_OUTPUT_INVERTED" 1 1014 "0x10"
d G "DSM_SYNC_CARRIER_LOW" 1 1015 "0x0100"
d G "DSM_INVERT_CARRIER_LOW" 1 1016 "0x0200"
d G "DSM_SYNC_CARRIER_HIGH" 1 1017 "0x1000"
d G "DSM_INVERT_CARRIER_HIGH" 1 1018 "0x2000"
d G "DSM_SOURCE_MDSCR" 1 1020 "0x00"
d G "DSM_SOURCE_MANUAL" 1 1021 "0x01"
d G "DSM_SOURCE_CCP1" 1 1022 "0x02"
d G "DSM_SOURCE_CCP2" 1 1023 "0x03"
d G "DSM_SOURCE_PWM3" 1 1024 "0x04"
d G "DSM_SOURCE_PWM4" 1 1025 "0x05"
d G "DSM_SOURCE_C1OUT" 1 1026 "0x06"
d G "DSM_SOURCE_C2OUT" 1 1027 "0x07"
d G "DSM_SOURCE_U1DT" 1 1028 "0x08"
d G "DSM_SOURCE_U1TX" 1 1029 "0x09"
d G "DSM_SOURCE_U2DT" 1 1030 "0x0A"
d G "DSM_SOURCE_U2TX" 1 1031 "0x0B"
d G "DSM_SOURCE_SDO1" 1 1032 "0x0C"
d G "DSM_SOURCE_SDO2" 1 1033 "0x0D"
d G "DSM_CARRIER_LOW_MDCARL" 1 1035 "0x0000"
d G "DSM_CARRIER_LOW_SYSTEM_CLOCK" 1 1036 "0x0001"
d G "DSM_CARRIER_LOW_HFINTOSC" 1 1037 "0x0002"
d G "DSM_CARRIER_LOW_CLKR" 1 1038 "0x0003"
d G "DSM_CARRIER_LOW_CCP1" 1 1039 "0x0004"
d G "DSM_CARRIER_LOW_CCP2" 1 1040 "0x0005"
d G "DSM_CARRIER_LOW_PWM3" 1 1041 "0x0006"
d G "DSM_CARRIER_LOW_PWM4" 1 1042 "0x0007"
d G "DSM_CARRIER_HIGH_MDCARH" 1 1043 "0x0000"
d G "DSM_CARRIER_HIGH_SYSTEM_CLOCK" 1 1044 "0x0100"
d G "DSM_CARRIER_HIGH_HFINTOSC" 1 1045 "0x0200"
d G "DSM_CARRIER_HIGH_CLKR" 1 1046 "0x0300"
d G "DSM_CARRIER_HIGH_CCP1" 1 1047 "0x0400"
d G "DSM_CARRIER_HIGH_CCP2" 1 1048 "0x0500"
d G "DSM_CARRIER_HIGH_PWM3" 1 1049 "0x0600"
d G "DSM_CARRIER_HIGH_PWM4" 1 1050 "0x0700"
c L "setup_dsm" 1 3 2 "FUNCTION"
f N "setup_oscillator" 1 1058 ""
v L "mode" 1 1058 "int32" `295 
f B "setup_oscillator" 1 1058 "int16(int32 mode)" `294 
f N "setup_oscillator" 1 1059 ""
v L "mode" 1 1059 "int32" `297 
v L "tune" 1 1059 "sint8" `298 
f B "setup_oscillator" 1 1059 "int16(int32 mode,sint8 tune)" `296  "Constants used in setup_oscillator() are:"
d G "OSC_HFINTRC_1MHZ" 1 1062 "0x00000060"
d G "OSC_HFINTRC_2MHZ" 1 1063 "0x00000160"
d G "OSC_HFINTRC_4MHZ" 1 1064 "0x00000260"
d G "OSC_HFINTRC_8MHZ" 1 1065 "0x00000360"
d G "OSC_HFINTRC_12MHZ" 1 1066 "0x00000460"
d G "OSC_HFINTRC_16MHZ" 1 1067 "0x00000560"
d G "OSC_HFINTRC_32MHZ" 1 1068 "0x00000660"
d G "OSC_HFINTRC_48MHZ" 1 1069 "0x00000760"
d G "OSC_HFINTRC_64MHZ" 1 1070 "0x00000860"
d G "OSC_EXTOSC_PLL" 1 1071 "0x00000020"
d G "OSC_SOSC" 1 1072 "0x00000040"
d G "OSC_LFINTRC" 1 1073 "0x00000050"
d G "OSC_EXTOSC" 1 1074 "0x00000070"
d G "OSC_CLK_DIV_BY_1" 1 1076 "0x00000000"
d G "OSC_CLK_DIV_BY_2" 1 1077 "0x00000001"
d G "OSC_CLK_DIV_BY_4" 1 1078 "0x00000002"
d G "OSC_CLK_DIV_BY_8" 1 1079 "0x00000003"
d G "OSC_CLK_DIV_BY_16" 1 1080 "0x00000004"
d G "OSC_CLK_DIV_BY_32" 1 1081 "0x00000005"
d G "OSC_CLK_DIV_BY_64" 1 1082 "0x00000006"
d G "OSC_CLK_DIV_BY_128" 1 1083 "0x00000007"
d G "OSC_CLK_DIV_BY_256" 1 1084 "0x00000008"
d G "OSC_CLK_DIV_BY_512" 1 1085 "0x00000009"
d G "OSC_SOSC_PWR_LOW" 1 1087 "0x00000000"
d G "OSC_SOSC_PWR_HIGH" 1 1088 "0x00400000"
d G "OSC_CLOCK_SWITCH_HOLD" 1 1090 "0x00800000"
d G "OSC_ADOSC_ENABLED" 1 1091 "0x04000000"
d G "OSC_SOSC_ENABLED" 1 1092 "0x08000000"
d G "OSC_LFINTRC_ENABLED" 1 1093 "0x10000000"
d G "OSC_MFINTRC_ENABLED" 1 1094 "0x20000000"
d G "OSC_HFINTRC_ENABLED" 1 1095 "0x40000000"
d G "OSC_EXTOSC_ENABLED" 1 1096 "0x80000000"
d G "OSC_PLL_READY" 1 1100 "0x0001"
d G "OSC_ADCRC_READY" 1 1101 "0x0004"
d G "OSC_SOSC_READY" 1 1102 "0x0008"
d G "OSC_LFINTRC_READY" 1 1103 "0x0010"
d G "OSC_MFINTRC_READY" 1 1104 "0x0020"
d G "OSC_HFINTRC_READY" 1 1105 "0x0040"
d G "OSC_EXTOSC_READY" 1 1106 "0x0080"
d G "OSC_CLOCK_SWITCH_IN_PROGRESS" 1 1107 "0x0800"
d G "OSC_CLOCK_SWITCH_COMPLETE" 1 1108 "0x1000"
c L "setup_oscillator" 1 3 4 "FUNCTION"
f N "setup_adc" 1 1115 ""
v L "mode" 1 1115 "int32" `300 
f B "setup_adc" 1 1115 "void(int32 mode)" `299 
f N "setup_adc" 1 1116 ""
v L "mode" 1 1116 "int32" `302 
v L "ADCRS" 1 1116 "int8" `303 
v L "ADRPT" 1 1116 "int8" `304 
f B "setup_adc" 1 1116 "void(int32 mode,int8 ADCRS,int8 ADRPT)" `301 
f N "set_adc_trigger" 1 1117 ""
v L "trigger" 1 1117 "int8" `306 
f B "set_adc_trigger" 1 1117 "void(int8 trigger)" `305 
f N "read_adc" 1 1118 ""
f B "read_adc" 1 1118 "int8()" `307 
f N "read_adc" 1 1119 ""
v L "mode" 1 1119 "int8" `309 
f B "read_adc" 1 1119 "int8(int8 mode)" `308 
f N "read_adc" 1 1120 ""
f G "read_adc" 1 1120 "int16()" `310 
f N "read_adc" 1 1121 ""
v L "mode" 1 1121 "int8" `311 
f G "read_adc" 1 1121 "int16(int8 mode,int8 which)" `310 
f N "adc_done" 1 1122 ""
f B "adc_done" 1 1122 "int8(int8 mode,int8 which)" `310 
f N "adc_read" 1 1123 ""
v L "which" 1 1123 "int8" `312 
f B "adc_read" 1 1123 "int8(int8 which)" `311 
f N "adc_read" 1 1124 ""
v L "which" 1 1124 "int8" `314 
f G "adc_read" 1 1124 "int16(int8 which,int8 value)" `313 
f N "adc_write" 1 1125 ""
v L "which" 1 1125 "int8" `314 
v L "value" 1 1125 "int8" `315 
f B "adc_write" 1 1125 "void(int8 which,int8 value)" `313 
f N "adc_write" 1 1126 ""
v L "which" 1 1126 "int8" `317 
v L "value" 1 1126 "int16" `318 
f B "adc_write" 1 1126 "void(int8 which,int16 value)" `316 
f N "adc_status" 1 1127 ""
f B "adc_status" 1 1127 "int8()" `319  "Constants used for SETUP_ADC() first parameter are:"
d G "ADC_LEGACY_MODE" 1 1129 "0"
d G "ADC_ACCUMULATE_MODE" 1 1130 "0x00010000"
d G "ADC_AVERAGE_MODE" 1 1131 "0x00020000"
d G "ADC_BURST_AVERAGE_MODE" 1 1132 "0x00030000"
d G "ADC_LOW_PASS_FILTER_MODE" 1 1133 "0x00040000"
d G "ADC_OFF" 1 1134 "0x80000000"
d G "ADC_CLOCK_DIV_2" 1 1136 "0"
d G "ADC_CLOCK_DIV_4" 1 1137 "0x00000001"
d G "ADC_CLOCK_DIV_8" 1 1138 "0x00000003"
d G "ADC_CLOCK_DIV_16" 1 1139 "0x00000007"
d G "ADC_CLOCK_DIV_32" 1 1140 "0x0000000F"
d G "ADC_CLOCK_DIV_64" 1 1141 "0x0000001F"
d G "ADC_CLOCK_DIV_128" 1 1142 "0x0000003F"
d G "ADC_CLOCK_INTERNAL" 1 1143 "0x00000080"
d G "ADC_TAD_MUL_0" 1 1145 "0x0000FF00"
d G "ADC_TAD_MUL_2" 1 1146 "0x0000FD00"
d G "ADC_TAD_MUL_4" 1 1147 "0x0000FB00"
d G "ADC_TAD_MUL_8" 1 1148 "0x0000F700"
d G "ADC_TAD_MUL_16" 1 1149 "0x0000EF00"
d G "ADC_TAD_MUL_32" 1 1150 "0x0000DF00"
d G "ADC_TAD_MUL_64" 1 1151 "0x0000BF00"
d G "ADC_TAD_MUL_128" 1 1152 "0x00007F00"
d G "ADC_TAD_MUL_255" 1 1153 "0"
d G "ADC_ADFLTR_TO_ADPREV_AT_START" 1 1155 "0"
d G "ADC_ADRES_TO_ADPREV_AT_START" 1 1156 "0x00800000"
d G "ADC_THRESHOLD_INT_DISABLED" 1 1158 "0"
d G "ADC_THRESHOLD_INT_ADERR_LT_ADLTH" 1 1159 "0x01000000"
d G "ADC_THRESHOLD_INT_ADERR_GTE_ADLTH" 1 1160 "0x02000000"
d G "ADC_THRESHOLD_INT_ADERR_GT_ADLTH_AND_LT_ADUTH" 1 1161 "0x03000000"
d G "ADC_THRESHOLD_INT_ADERR_LT_ATLTH_OR_GT_ADUTH" 1 1162 "0x04000000"
d G "ADC_THRESHOLD_INT_ADERR_LTE_ADUTH" 1 1163 "0x05000000"
d G "ADC_THRESHOLD_INT_ADERR_GT_ADUTH" 1 1164 "0x06000000"
d G "ADC_THRESHOLD_INT_END_OF_CALCULATION" 1 1165 "0x07000000"
d G "ADC_ERR_CALC_MODE_ADRES_MINUS_ADPREV" 1 1167 "0"
d G "ADC_ERR_CALC_MODE_ADRES_MINUS_ADSTPT" 1 1168 "0x10000000"
d G "ADC_ERR_CALC_MODE_ADRES_MINUS_ADFLTR" 1 1169 "0x20000000"
d G "ADC_ERR_CALC_MODE_ADPREV_MINUS_ADFLTR" 1 1170 "0x40000000"
d G "ADC_ERR_CALC_MODE_ADFLTR_MINUS_ADSTPT" 1 1171 "0x50000000"
d G "ADC_CONTINUOUS_OPERATION_ENABLED" 1 1173 "0x00000040"
d G "ADC_STOP_WHEN_THRESHOLD_CONDITIONS_MET" 1 1174 "0x08000000" "If Continuous Operation is enabled"
d G "ADC_RESULT" 1 1189 "0"
d G "ADC_PREV_RESULT" 1 1190 "1"
d G "ADC_ACCUMULATOR" 1 1191 "2"
d G "ADC_FILTER" 1 1192 "3"
d G "ADC_ERROR" 1 1193 "4"
d G "ADC_COUNT" 1 1194 "5"
d G "ADC_REPEAT" 1 1195 "6"
d G "ADC_SET_POINT" 1 1196 "7"
d G "ADC_LOWER_THRESHOLD" 1 1197 "8"
d G "ADC_UPPER_THRESHOLD" 1 1198 "9"
d G "ADC_TRIGGER_DISABLED" 1 1201 "0" "External trigger disabled, use read_adc() to start conversion"
d G "ADC_TRIGGER_ADACT_PIN" 1 1202 "0x01"
d G "ADC_TRIGGER_TIMER0" 1 1203 "0x02"
d G "ADC_TRIGGER_TIMER1" 1 1204 "0x03"
d G "ADC_TRIGGER_TIMER2" 1 1205 "0x04"
d G "ADC_TRIGGER_TIMER3" 1 1206 "0x05"
d G "ADC_TRIGGER_TIMER4" 1 1207 "0x06"
d G "ADC_TRIGGER_TIMER5" 1 1208 "0x07"
d G "ADC_TRIGGER_TIMER6" 1 1209 "0x08"
d G "ADC_TRIGGER_CCP1" 1 1210 "0x09"
d G "ADC_TRIGGER_CCP2" 1 1211 "0x0A"
d G "ADC_TRIGGER_PWM3" 1 1212 "0x0B"
d G "ADC_TRIGGER_PWM4" 1 1213 "0x0C"
d G "ADC_TRIGGER_COMP1" 1 1214 "0x0D"
d G "ADC_TRIGGER_COMP2" 1 1215 "0x0E"
d G "ADC_TRIGGER_IOC" 1 1216 "0x0F"
d G "ADC_TRIGGER_ADERR" 1 1217 "0x1C" "Read of ADERR register"
d G "ADC_TRIGGER_ADRESH" 1 1218 "0x1D" "Read of ADRESH register"
d G "ADC_TRIGGER_ADPCH" 1 1219 "0x1F" "Read of ADPCH register"
d G "ADC_OVERFLOWED" 1 1222 "0x80"
d G "ADC_GT_UPPER_THRESHOLD" 1 1223 "0x40"
d G "ADC_LT_LOWER_THRESHOLD" 1 1224 "0x20"
d G "ADC_UPDATING" 1 1225 "0x10"
c L "adc_status" 1 3 3 "FUNCTION"
c L "adc_status" 1 3 1 "FUNCTION"
f N "setup_adc_ports" 1 1233 ""
v L "pins" 1 1233 "int32" `322 
f B "setup_adc_ports" 1 1233 "void(int32 pins)" `321 
f N "setup_adc_ports" 1 1234 ""
v L "pins" 1 1234 "int32" `324 
v L "reference" 1 1234 "int32" `325 
f B "setup_adc_ports" 1 1234 "void(int32 pins,int32 reference)" `323 
f N "set_analog_pins" 1 1235 ""
v L "pin" 1 1235 "int8" `327 
f B "set_analog_pins" 1 1235 "void(int8 pin,*int8 _VA_LIST)" `326 
f N "setup_adc_reference" 1 1236 ""
v L "reference" 1 1236 "int32" `330 
f B "setup_adc_reference" 1 1236 "void(int32 reference)" `329 
f N "set_adc_channel" 1 1237 ""
v L "channel" 1 1237 "int8" `332 
f B "set_adc_channel" 1 1237 "void(int8 channel)" `331  "Constants used in SETUP_ADC_PORTS() are:"
d G "sAN0" 1 1241 "0x01000000" "| A0"
d G "sAN1" 1 1242 "0x02000000" "| A1"
d G "sAN2" 1 1243 "0x04000000" "| A2"
d G "sAN3" 1 1244 "0x08000000" "| A3"
d G "sAN4" 1 1245 "0x10000000" "| A4"
d G "sAN5" 1 1246 "0x20000000" "| A5"
d G "sAN6" 1 1247 "0x40000000" "| A6"
d G "sAN7" 1 1248 "0x80000000" "| A7"
d G "sAN8" 1 1249 "0x00010000" "| B0"
d G "sAN9" 1 1250 "0x00020000" "| B1"
d G "sAN10" 1 1251 "0x00040000" "| B2"
d G "sAN11" 1 1252 "0x00080000" "| B3"
d G "sAN12" 1 1253 "0x00100000" "| B4"
d G "sAN13" 1 1254 "0x00200000" "| B5"
d G "sAN14" 1 1255 "0x00400000" "| B6"
d G "sAN15" 1 1256 "0x00800000" "| B7"
d G "sAN16" 1 1257 "0x00000100" "| C0"
d G "sAN17" 1 1258 "0x00000200" "| C1"
d G "sAN18" 1 1259 "0x00000400" "| C2"
d G "sAN19" 1 1260 "0x00000800" "| C3"
d G "sAN20" 1 1261 "0x00001000" "| C4"
d G "sAN21" 1 1262 "0x00002000" "| C5"
d G "sAN22" 1 1263 "0x00004000" "| C6"
d G "sAN23" 1 1264 "0x00008000" "| C7"
d G "NO_ANALOGS" 1 1265 "0" "None"
d G "ALL_ANALOG" 1 1266 "0xFFFFFF00" "A0 A1 A2 A3 A4 A5 A6 A7 B0 B1 B2 B3 B4 B5 B6 B7 C0 C1 C2 C3 C4 C5 C6 C7"
d G "VSS_VDD" 1 1269 "0x00000000" "| Range 0-Vdd"
d G "VSS_VREF" 1 1270 "0x00000002" "| Range 0-VrefH"
d G "VSS_FVR" 1 1271 "0x00000003" "| Range 0-Fixed Voltage Reference"
d G "VREF_VDD" 1 1272 "0x00000010" "| Range VrefL-Vdd"
d G "VREF_VREF" 1 1273 "0x00000012" "| Range VrefL-VrefH"
d G "VREF_FVR" 1 1274 "0x00000013" "| Range VrefL-Fixed Voltage Reference"
d G "AVSS_CHANNEL" 1 1278 "0x3C"
d G "TEMPERATURE_INDICATOR" 1 1279 "0x3D"
d G "DAC_CHANNEL" 1 1280 "0x3E"
d G "FVR_CHANNEL" 1 1281 "0x3F"
d G "ADC_START_AND_READ" 1 1284 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 1 1285 "1"
d G "ADC_READ_ONLY" 1 1286 "6"
c L "set_adc_channel" 1 3 3 "FUNCTION"
f N "abs" 1 1292 ""
v L "x" 1 1292 "sint8" `334 
f B "abs" 1 1292 "sint8(sint8 x)" `333 
f N "abs" 1 1293 ""
v L "x" 1 1293 "sint16" `336 
f B "abs" 1 1293 "sint16(sint16 x)" `335 
f N "abs" 1 1294 ""
v L "x" 1 1294 "sint32" `338 
f B "abs" 1 1294 "sint32(sint32 x)" `337 
f N "abs" 1 1295 ""
v L "x" 1 1295 "float" `340 
f B "abs" 1 1295 "float(float x)" `339 
f N "_mul" 1 1296 ""
v L "??65535" 1 1296 "int8" `342 
v L "??65535" 1 1296 "int8" `343 
f B "_mul" 1 1296 "int16(int8 ,int8 )" `341 
f N "_mul" 1 1297 ""
v L "??65535" 1 1297 "sint8" `345 
v L "??65535" 1 1297 "sint8" `346 
f B "_mul" 1 1297 "sint16(sint8 ,sint8 )" `344 
f N "_mul" 1 1298 ""
v L "??65535" 1 1298 "int16" `348 
v L "??65535" 1 1298 "int16" `349 
f B "_mul" 1 1298 "int32(int16 ,int16 )" `347 
f N "_mul" 1 1299 ""
v L "??65535" 1 1299 "sint16" `351 
v L "??65535" 1 1299 "sint16" `352 
f B "_mul" 1 1299 "sint32(sint16 ,sint16 )" `350  "Memory Manipulation Prototypes:"
f N "read_bank" 1 1302 ""
v L "bank" 1 1302 "int8" `354 
v L "offset" 1 1302 "int8" `355 
f B "read_bank" 1 1302 "int8(int8 bank,int8 offset)" `353 
f N "write_bank" 1 1303 ""
v L "bank" 1 1303 "int8" `357 
v L "offset" 1 1303 "int8" `358 
v L "value" 1 1303 "int8" `359 
f B "write_bank" 1 1303 "void(int8 bank,int8 offset,int8 value)" `356 
f N "strcpy" 1 1304 ""
v L "dest" 1 1304 "*int8" `361 
v L "src" 1 1304 "*int8" `362 
f B "strcpy" 1 1304 "void(*int8 dest,*int8 src)" `360 
f N "memset" 1 1305 ""
v L "destination" 1 1305 "*int8" `364 
v L "value" 1 1305 "int8" `365 
v L "num" 1 1305 "int16" `366 
f B "memset" 1 1305 "void(*int8 destination,int8 value,int16 num)" `363 
f N "memcpy" 1 1306 ""
v L "destination" 1 1306 "*int8" `368 
v L "source" 1 1306 "*int8" `369 
v L "num" 1 1306 "int16" `370 
f B "memcpy" 1 1306 "void(*int8 destination,*int8 source,int16 num)" `367  "String Prototypes:"
f N "toupper" 1 1309 ""
v L "cvalue" 1 1309 "int8" `372 
f B "toupper" 1 1309 "int8(int8 cvalue)" `371 
f N "tolower" 1 1310 ""
v L "cvalue" 1 1310 "int8" `374 
f B "tolower" 1 1310 "int8(int8 cvalue)" `373 
f N "sprintf" 1 1311 ""
v L "string" 1 1311 "*int8" `376 
v L "cstring" 1 1311 "*int8" `377 
f B "sprintf" 1 1311 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `375  "Data Manipulators Prototypes:"
f N "shift_left" 1 1314 ""
v L "address" 1 1314 "*int8" `380 
v L "bytes" 1 1314 "int8" `381 
v L "value" 1 1314 "int8" `382 
f B "shift_left" 1 1314 "int8(*int8 address,int8 bytes,int8 value)" `379 
f N "shift_right" 1 1315 ""
v L "address" 1 1315 "*int8" `384 
v L "bytes" 1 1315 "int8" `385 
v L "value" 1 1315 "int8" `386 
f B "shift_right" 1 1315 "int8(*int8 address,int8 bytes,int8 value)" `383 
f N "rotate_left" 1 1316 ""
v L "address" 1 1316 "*int8" `388 
v L "bytes" 1 1316 "int8" `389 
f B "rotate_left" 1 1316 "void(*int8 address,int8 bytes)" `387 
f N "rotate_right" 1 1317 ""
v L "address" 1 1317 "*int8" `391 
v L "bytes" 1 1317 "int8" `392 
f B "rotate_right" 1 1317 "void(*int8 address,int8 bytes)" `390 
f N "swap" 1 1318 ""
v L "value" 1 1318 "int8" `394 
f B "swap" 1 1318 "void(int8 value)" `393 
f N "make8" 1 1319 ""
v L "var" 1 1319 "int16" `396 
v L "offset" 1 1319 "int8" `397 
f B "make8" 1 1319 "int8(int16 var,int8 offset)" `395 
f N "make8" 1 1320 ""
v L "var" 1 1320 "int32" `399 
v L "offset" 1 1320 "int8" `400 
f B "make8" 1 1320 "int8(int32 var,int8 offset)" `398 
f N "make16" 1 1321 ""
v L "varhigh" 1 1321 "int8" `402 
v L "varlow" 1 1321 "int8" `403 
f B "make16" 1 1321 "int16(int8 varhigh,int8 varlow)" `401 
f N "make32" 1 1322 ""
v L "var1" 1 1322 "int16" `405 
f B "make32" 1 1322 "int32(int16 var1)" `404 
f N "make32" 1 1323 ""
v L "var1" 1 1323 "int16" `407 
v L "var2" 1 1323 "int16" `408 
f B "make32" 1 1323 "int32(int16 var1,int16 var2)" `406 
f N "make32" 1 1324 ""
v L "var1" 1 1324 "int16" `410 
v L "var2" 1 1324 "int8" `411 
f B "make32" 1 1324 "int32(int16 var1,int8 var2)" `409 
f N "make32" 1 1325 ""
v L "var1" 1 1325 "int16" `413 
v L "var2" 1 1325 "int8" `414 
v L "var3" 1 1325 "int8" `415 
f B "make32" 1 1325 "int32(int16 var1,int8 var2,int8 var3)" `412 
f N "make32" 1 1326 ""
v L "var1" 1 1326 "int8" `417 
f B "make32" 1 1326 "int32(int8 var1)" `416 
f N "make32" 1 1327 ""
v L "var1" 1 1327 "int8" `419 
v L "var2" 1 1327 "int8" `420 
f B "make32" 1 1327 "int32(int8 var1,int8 var2)" `418 
f N "make32" 1 1328 ""
v L "var1" 1 1328 "int8" `422 
v L "var2" 1 1328 "int8" `423 
v L "var3" 1 1328 "int8" `424 
f B "make32" 1 1328 "int32(int8 var1,int8 var2,int8 var3)" `421 
f N "make32" 1 1329 ""
v L "var1" 1 1329 "int8" `426 
v L "var2" 1 1329 "int8" `427 
v L "var3" 1 1329 "int8" `428 
v L "var4" 1 1329 "int8" `429 
f B "make32" 1 1329 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `425 
f N "make32" 1 1330 ""
v L "var1" 1 1330 "int8" `431 
v L "var2" 1 1330 "int16" `432 
f B "make32" 1 1330 "int32(int8 var1,int16 var2)" `430 
f N "make32" 1 1331 ""
v L "var1" 1 1331 "int8" `434 
v L "var2" 1 1331 "int16" `435 
v L "var3" 1 1331 "int8" `436 
f B "make32" 1 1331 "int32(int8 var1,int16 var2,int8 var3)" `433 
f N "make32" 1 1332 ""
v L "var1" 1 1332 "int8" `438 
v L "var2" 1 1332 "int8" `439 
v L "var3" 1 1332 "int16" `440 
f B "make32" 1 1332 "int32(int8 var1,int8 var2,int16 var3)" `437 
f N "bit_set" 1 1333 ""
v L "var" 1 1333 "int8" `442 
v L "bit" 1 1333 "int8" `443 
f B "bit_set" 1 1333 "void(int8 var,int8 bit)" `441 
f N "bit_set" 1 1334 ""
v L "var" 1 1334 "int16" `445 
v L "bit" 1 1334 "int8" `446 
f B "bit_set" 1 1334 "void(int16 var,int8 bit)" `444 
f N "bit_set" 1 1335 ""
v L "var" 1 1335 "int32" `448 
v L "bit" 1 1335 "int8" `449 
f B "bit_set" 1 1335 "void(int32 var,int8 bit)" `447 
f N "bit_clear" 1 1336 ""
v L "var" 1 1336 "int8" `451 
v L "bit" 1 1336 "int8" `452 
f B "bit_clear" 1 1336 "void(int8 var,int8 bit)" `450 
f N "bit_clear" 1 1337 ""
v L "var" 1 1337 "int16" `454 
v L "bit" 1 1337 "int8" `455 
f B "bit_clear" 1 1337 "void(int16 var,int8 bit)" `453 
f N "bit_clear" 1 1338 ""
v L "var" 1 1338 "int32" `457 
v L "bit" 1 1338 "int8" `458 
f B "bit_clear" 1 1338 "void(int32 var,int8 bit)" `456 
f N "bit_test" 1 1339 ""
v L "var" 1 1339 "int8" `460 
v L "bit" 1 1339 "int8" `461 
f B "bit_test" 1 1339 "int8(int8 var,int8 bit)" `459 
f N "bit_test" 1 1340 ""
v L "var" 1 1340 "int16" `463 
v L "bit" 1 1340 "int8" `464 
f B "bit_test" 1 1340 "int8(int16 var,int8 bit)" `462 
f N "bit_test" 1 1341 ""
v L "var" 1 1341 "int32" `466 
v L "bit" 1 1341 "int8" `467 
f B "bit_test" 1 1341 "int8(int32 var,int8 bit)" `465  "#use delay() Prototypes:"
f N "delay_cycles" 1 1344 ""
v L "count" 1 1344 "int8" `469 
f B "delay_cycles" 1 1344 "void(int8 count)" `468 
f N "delay_ms" 1 1345 ""
v L "time" 1 1345 "int16" `471 
f B "delay_ms" 1 1345 "void(int16 time)" `470 
f N "delay_us" 1 1346 ""
v L "time" 1 1346 "int16" `473 
f B "delay_us" 1 1346 "void(int16 time)" `472  "#use rs232() Prototypes:"
f N "putchar" 1 1349 ""
v L "cdata" 1 1349 "int8" `475 
f B "putchar" 1 1349 "void(int8 cdata)" `474 
f N "putchar" 1 1350 ""
v L "cdata" 1 1350 "int8" `477 
v L "stream" 1 1350 "int8" `478 
f B "putchar" 1 1350 "void(int8 cdata,int8 stream)" `476 
f N "puts" 1 1351 ""
v L "string" 1 1351 "*int8" `480 
f B "puts" 1 1351 "void(*int8 string)" `479 
f N "puts" 1 1352 ""
v L "string" 1 1352 "*int8" `482 
v L "stream" 1 1352 "int8" `483 
f B "puts" 1 1352 "void(*int8 string,int8 stream)" `481 
f N "getch" 1 1353 ""
f B "getch" 1 1353 "int8()" `484 
f N "getch" 1 1354 ""
v L "stream" 1 1354 "int8" `486 
f B "getch" 1 1354 "int8(int8 stream)" `485 
f N "gets" 1 1355 ""
v L "string" 1 1355 "*int8" `488 
f B "gets" 1 1355 "void(*int8 string)" `487 
f N "gets" 1 1356 ""
v L "string" 1 1356 "*int8" `490 
v L "stream" 1 1356 "int8" `491 
f B "gets" 1 1356 "void(*int8 string,int8 stream)" `489 
f N "kbhit" 1 1357 ""
f B "kbhit" 1 1357 "int8()" `492 
f N "kbhit" 1 1358 ""
v L "stream" 1 1358 "int8" `494 
f B "kbhit" 1 1358 "int8(int8 stream)" `493 
f N "printf" 1 1359 ""
v L "string" 1 1359 "*int8" `496 
f B "printf" 1 1359 "void(*int8 string,*int8 _VA_LIST)" `495 
f N "fprintf" 1 1360 ""
v L "stream" 1 1360 "int8" `499 
v L "string" 1 1360 "*int8" `500 
f B "fprintf" 1 1360 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `498 
f N "putc_send" 1 1361 ""
f B "putc_send" 1 1361 "void()" `502 
f N "fputc_send" 1 1362 ""
v L "stream" 1 1362 "int8" `504 
f B "fputc_send" 1 1362 "void(int8 stream)" `503 
f N "rcv_buffer_full" 1 1363 ""
f B "rcv_buffer_full" 1 1363 "int8()" `505 
f N "rcv_buffer_full" 1 1364 ""
v L "stream" 1 1364 "int8" `507 
f B "rcv_buffer_full" 1 1364 "int8(int8 stream)" `506 
f N "rcv_buffer_bytes" 1 1365 ""
f B "rcv_buffer_bytes" 1 1365 "int16()" `508 
f N "rcv_buffer_bytes" 1 1366 ""
v L "stream" 1 1366 "int8" `510 
f B "rcv_buffer_bytes" 1 1366 "int16(int8 stream)" `509 
f N "tx_buffer_full" 1 1367 ""
f B "tx_buffer_full" 1 1367 "int8()" `511 
f N "tx_buffer_full" 1 1368 ""
v L "stream" 1 1368 "int8" `513 
f B "tx_buffer_full" 1 1368 "int8(int8 stream)" `512 
f N "tx_buffer_bytes" 1 1369 ""
f B "tx_buffer_bytes" 1 1369 "int16()" `514 
f N "tx_buffer_bytes" 1 1370 ""
v L "stream" 1 1370 "int8" `516 
f B "tx_buffer_bytes" 1 1370 "int16(int8 stream)" `515  "#use i2c() Prototypes:"
f N "i2c_read" 1 1373 ""
f B "i2c_read" 1 1373 "int8()" `517 
f N "i2c_read" 1 1374 ""
v L "ack" 1 1374 "int8" `519 
f B "i2c_read" 1 1374 "int8(int8 ack)" `518 
f N "i2c_read" 1 1375 ""
v L "stream" 1 1375 "int8" `521 
v L "ack" 1 1375 "int8" `522 
f B "i2c_read" 1 1375 "int8(int8 stream,int8 ack)" `520 
f N "i2c_write" 1 1376 ""
v L "data" 1 1376 "int8" `524 
f B "i2c_write" 1 1376 "int8(int8 data)" `523 
f N "i2c_write" 1 1377 ""
v L "stream" 1 1377 "int8" `526 
v L "data" 1 1377 "int8" `527 
f B "i2c_write" 1 1377 "int8(int8 stream,int8 data)" `525 
f N "i2c_start" 1 1378 ""
f B "i2c_start" 1 1378 "void()" `528 
f N "i2c_start" 1 1379 ""
v L "stream" 1 1379 "int8" `530 
f B "i2c_start" 1 1379 "void(int8 stream)" `529 
f N "i2c_start" 1 1380 ""
v L "stream" 1 1380 "int8" `532 
v L "restart" 1 1380 "int8" `533 
f B "i2c_start" 1 1380 "void(int8 stream,int8 restart)" `531 
f N "i2c_stop" 1 1381 ""
f B "i2c_stop" 1 1381 "void()" `534 
f N "i2c_stop" 1 1382 ""
v L "stream" 1 1382 "int8" `536 
f B "i2c_stop" 1 1382 "void(int8 stream)" `535 
f N "i2c_isr_state" 1 1383 ""
f B "i2c_isr_state" 1 1383 "int8()" `537 
f N "i2c_slaveaddr" 1 1384 ""
v L "addr" 1 1384 "int8" `539 
f B "i2c_slaveaddr" 1 1384 "void(int8 addr)" `538 
f N "i2c_slaveaddr" 1 1385 ""
v L "stream" 1 1385 "int8" `541 
v L "addr" 1 1385 "int8" `542 
f B "i2c_slaveaddr" 1 1385 "void(int8 stream,int8 addr)" `540 
f N "i2c_poll" 1 1386 ""
f B "i2c_poll" 1 1386 "int8()" `543 
f N "i2c_poll" 1 1387 ""
v L "stream" 1 1387 "int8" `545 
f B "i2c_poll" 1 1387 "int8(int8 stream)" `544 
f N "i2c_init" 1 1388 ""
v L "baud" 1 1388 "int32" `547 
f B "i2c_init" 1 1388 "void(int32 baud)" `546 
f N "i2c_init" 1 1389 ""
v L "stream" 1 1389 "int8" `549 
v L "baud" 1 1389 "int32" `550 
f B "i2c_init" 1 1389 "void(int8 stream,int32 baud)" `548 
f N "i2c_transfer" 1 1390 ""
v L "address" 1 1390 "int8" `552 
v L "wData" 1 1390 "*int8" `553 
v L "wCount" 1 1390 "int8" `554 
f B "i2c_transfer" 1 1390 "void(int8 address,*int8 wData,int8 wCount)" `551 
f N "i2c_transfer" 1 1391 ""
v L "address" 1 1391 "int8" `556 
v L "wData" 1 1391 "*int8" `557 
v L "wCount" 1 1391 "int8" `558 
v L "rData" 1 1391 "*int8" `559 
v L "rCount" 1 1391 "*int8" `560 
f B "i2c_transfer" 1 1391 "void(int8 address,*int8 wData,int8 wCount,*int8 rData,*int8 rCount)" `555 
f N "i2c_transfer" 1 1392 ""
v L "stream" 1 1392 "int8" `562 
v L "address" 1 1392 "int8" `563 
v L "wData" 1 1392 "*int8" `564 
v L "wCount" 1 1392 "int8" `565 
f B "i2c_transfer" 1 1392 "void(int8 stream,int8 address,*int8 wData,int8 wCount)" `561 
f N "i2c_transfer" 1 1393 ""
v L "stream" 1 1393 "int8" `567 
v L "address" 1 1393 "int8" `568 
v L "wData" 1 1393 "*int8" `569 
v L "wCount" 1 1393 "int8" `570 
v L "rData" 1 1393 "*int8" `571 
v L "rCount" 1 1393 "*int8" `572 
f B "i2c_transfer" 1 1393 "void(int8 stream,int8 address,*int8 wData,int8 wCount,*int8 rData,*int8 rCount)" `566 
f N "i2c_transfer_out" 1 1394 ""
v L "address" 1 1394 "int8" `574 
v L "wData" 1 1394 "*int8" `575 
v L "wCount" 1 1394 "int8" `576 
f B "i2c_transfer_out" 1 1394 "void(int8 address,*int8 wData,int8 wCount)" `573 
f N "i2c_transfer_out" 1 1395 ""
v L "stream" 1 1395 "int8" `578 
v L "address" 1 1395 "int8" `579 
v L "wData" 1 1395 "*int8" `580 
v L "wCount" 1 1395 "int8" `581 
f B "i2c_transfer_out" 1 1395 "void(int8 stream,int8 address,*int8 wData,int8 wCount)" `577 
f N "i2c_transfer_in" 1 1396 ""
v L "address" 1 1396 "int8" `583 
v L "rData" 1 1396 "*int8" `584 
v L "rCount" 1 1396 "int8" `585 
f B "i2c_transfer_in" 1 1396 "void(int8 address,*int8 rData,int8 rCount)" `582 
f N "i2c_transfer_in" 1 1397 ""
v L "stream" 1 1397 "int8" `587 
v L "address" 1 1397 "int8" `588 
v L "rData" 1 1397 "*int8" `589 
v L "rCount" 1 1397 "int8" `590 
f B "i2c_transfer_in" 1 1397 "void(int8 stream,int8 address,*int8 rData,int8 rCount)" `586  "#use spi() Prototypes:"
f N "spi_xfer" 1 1400 ""
f B "spi_xfer" 1 1400 "int8()" `591 
f N "spi_xfer" 1 1401 ""
f G "spi_xfer" 1 1401 "int16(int8 data)" `592 
f N "spi_xfer" 1 1402 ""
f G "spi_xfer" 1 1402 "int32(int8 data)" `592 
f N "spi_xfer" 1 1403 ""
v L "data" 1 1403 "int8" `593 
f B "spi_xfer" 1 1403 "int8(int8 data)" `592 
f N "spi_xfer" 1 1404 ""
v L "data" 1 1404 "int16" `595 
f B "spi_xfer" 1 1404 "int16(int16 data)" `594 
f N "spi_xfer" 1 1405 ""
v L "data" 1 1405 "int32" `597 
f B "spi_xfer" 1 1405 "int32(int32 data)" `596 
f N "spi_xfer" 1 1406 ""
v L "stream" 1 1406 "int8" `599 
v L "data" 1 1406 "int8" `600 
f B "spi_xfer" 1 1406 "int8(int8 stream,int8 data)" `598 
f N "spi_xfer" 1 1407 ""
v L "stream" 1 1407 "int8" `602 
v L "data" 1 1407 "int16" `603 
f B "spi_xfer" 1 1407 "int16(int8 stream,int16 data)" `601 
f N "spi_xfer" 1 1408 ""
v L "stream" 1 1408 "int8" `605 
v L "data" 1 1408 "int32" `606 
f B "spi_xfer" 1 1408 "int32(int8 stream,int32 data)" `604 
f N "spi_xfer" 1 1409 ""
v L "stream" 1 1409 "int8" `608 
v L "data" 1 1409 "int8" `609 
v L "bits" 1 1409 "int8" `610 
f B "spi_xfer" 1 1409 "int8(int8 stream,int8 data,int8 bits)" `607 
f N "spi_xfer" 1 1410 ""
v L "stream" 1 1410 "int8" `612 
v L "data" 1 1410 "int16" `613 
v L "bits" 1 1410 "int8" `614 
f B "spi_xfer" 1 1410 "int16(int8 stream,int16 data,int8 bits)" `611 
f N "spi_xfer" 1 1411 ""
v L "stream" 1 1411 "int8" `616 
v L "data" 1 1411 "int32" `617 
v L "bits" 1 1411 "int8" `618 
f B "spi_xfer" 1 1411 "int32(int8 stream,int32 data,int8 bits)" `615 
f N "spi_init" 1 1412 ""
v L "baud" 1 1412 "int32" `620 
f B "spi_init" 1 1412 "void(int32 baud)" `619 
f N "spi_init" 1 1413 ""
v L "stream" 1 1413 "int8" `622 
v L "baud" 1 1413 "int32" `623 
f B "spi_init" 1 1413 "void(int8 stream,int32 baud)" `621 
f N "spi_speed" 1 1414 ""
v L "baud" 1 1414 "int32" `625 
f B "spi_speed" 1 1414 "void(int32 baud)" `624 
f N "spi_speed" 1 1415 ""
v L "stream" 1 1415 "int8" `627 
v L "baud" 1 1415 "int32" `628 
f B "spi_speed" 1 1415 "void(int8 stream,int32 baud)" `626 
f N "spi_speed" 1 1416 ""
v L "stream" 1 1416 "int8" `630 
v L "baud" 1 1416 "int32" `631 
v L "clock" 1 1416 "int32" `632 
f B "spi_speed" 1 1416 "void(int8 stream,int32 baud,int32 clock)" `629 
f N "spi_prewrite" 1 1417 ""
v L "data" 1 1417 "int8" `634 
f B "spi_prewrite" 1 1417 "void(int8 data)" `633 
f N "spi_prewrite" 1 1418 ""
v L "data" 1 1418 "int16" `636 
f B "spi_prewrite" 1 1418 "void(int16 data)" `635 
f N "spi_prewrite" 1 1419 ""
v L "data" 1 1419 "int32" `638 
f B "spi_prewrite" 1 1419 "void(int32 data)" `637 
f N "spi_prewrite" 1 1420 ""
v L "??65535" 1 1420 "int8" `640 
v L "data" 1 1420 "int8" `641 
f B "spi_prewrite" 1 1420 "void(int8 ,int8 data)" `639 
f N "spi_prewrite" 1 1421 ""
v L "??65535" 1 1421 "int8" `643 
v L "data" 1 1421 "int16" `644 
f B "spi_prewrite" 1 1421 "void(int8 ,int16 data)" `642 
f N "spi_prewrite" 1 1422 ""
v L "??65535" 1 1422 "int8" `646 
v L "data" 1 1422 "int32" `647 
f B "spi_prewrite" 1 1422 "void(int8 ,int32 data)" `645 
f N "spi_xfer_in" 1 1423 ""
f B "spi_xfer_in" 1 1423 "int8()" `648 
f N "spi_xfer_in" 1 1424 ""
f G "spi_xfer_in" 1 1424 "int16(int8 bits)" `649 
f N "spi_xfer_in" 1 1425 ""
f G "spi_xfer_in" 1 1425 "int32(int8 bits)" `649 
f N "spi_xfer_in" 1 1426 ""
v L "bits" 1 1426 "int8" `650 
f B "spi_xfer_in" 1 1426 "int8(int8 bits)" `649 
f N "spi_xfer_in" 1 1427 ""
v L "bits" 1 1427 "int8" `652 
f G "spi_xfer_in" 1 1427 "int16(int8 bits,int8 bits)" `651 
f N "spi_xfer_in" 1 1428 ""
v L "bits" 1 1428 "int8" `652 
f G "spi_xfer_in" 1 1428 "int32(int8 bits,int8 bits)" `651 
f N "spi_xfer_in" 1 1429 ""
v L "stream" 1 1429 "int8" `652 
v L "bits" 1 1429 "int8" `653 
f B "spi_xfer_in" 1 1429 "int8(int8 stream,int8 bits)" `651 
f N "spi_xfer_in" 1 1430 ""
v L "stream" 1 1430 "int8" `652 
v L "bits" 1 1430 "int8" `656 
f G "spi_xfer_in" 1 1430 "int16(int8 stream,int8 bits,int8 task)" `654 
f N "spi_xfer_in" 1 1431 ""
v L "stream" 1 1431 "int8" `652 
v L "bits" 1 1431 "int8" `656 
f G "spi_xfer_in" 1 1431 "int32(int8 stream,int8 bits,int8 task)" `654  "#use rtos() Prototypes:"
f N "rtos_run" 1 1434 ""
f B "rtos_run" 1 1434 "void(int8 stream,int8 bits,int8 task)" `654 
f N "rtos_yield" 1 1435 ""
f B "rtos_yield" 1 1435 "void(int8 bits,int8 task)" `655 
f N "rtos_enable" 1 1436 ""
v L "task" 1 1436 "int8" `657 
f B "rtos_enable" 1 1436 "void(int8 task)" `656 
f N "rtos_disable" 1 1437 ""
v L "task" 1 1437 "int8" `659 
f B "rtos_disable" 1 1437 "void(int8 task)" `658 
f N "rtos_terminate" 1 1438 ""
f B "rtos_terminate" 1 1438 "void()" `660 
f N "rtos_await" 1 1439 ""
v L "flag" 1 1439 "int8" `662 
f B "rtos_await" 1 1439 "void(int8 flag)" `661 
f N "rtos_wait" 1 1440 ""
v L "sem" 1 1440 "int8" `664 
f B "rtos_wait" 1 1440 "void(int8 sem)" `663 
f N "rtos_signal" 1 1441 ""
v L "sem" 1 1441 "int8" `666 
f B "rtos_signal" 1 1441 "void(int8 sem)" `665 
f N "rtos_msg_send" 1 1442 ""
v L "task" 1 1442 "int8" `668 
v L "msg" 1 1442 "int8" `669 
f B "rtos_msg_send" 1 1442 "void(int8 task,int8 msg)" `667 
f N "rtos_msg_read" 1 1443 ""
f B "rtos_msg_read" 1 1443 "int8()" `670 
f N "rtos_msg_poll" 1 1444 ""
f B "rtos_msg_poll" 1 1444 "int8()" `671 
f N "rtos_overrun" 1 1445 ""
v L "task" 1 1445 "int8" `673 
f B "rtos_overrun" 1 1445 "int8(int8 task)" `672 
f N "rtos_stats" 1 1446 ""
v L "task" 1 1446 "int8" `675 
v L "stat" 1 1446 "*int8" `676 
f B "rtos_stats" 1 1446 "void(int8 task,*int8 stat)" `674  "#use timer() Prototypes:"
f N "get_ticks" 1 1449 ""
f B "get_ticks" 1 1449 "int8()" `677 
f N "get_ticks" 1 1450 ""
f G "get_ticks" 1 1450 "int16(int8 stream)" `678 
f N "get_ticks" 1 1451 ""
f G "get_ticks" 1 1451 "int32(int8 stream)" `678 
f N "get_ticks" 1 1452 ""
v L "stream" 1 1452 "int8" `679 
f B "get_ticks" 1 1452 "int8(int8 stream)" `678 
f N "get_ticks" 1 1453 ""
v L "stream" 1 1453 "int8" `681 
f G "get_ticks" 1 1453 "int16(int8 stream)" `680 
f N "get_ticks" 1 1454 ""
v L "stream" 1 1454 "int8" `681 
f G "get_ticks" 1 1454 "int32(int8 stream)" `680 
f N "set_ticks" 1 1455 ""
v L "value" 1 1455 "int8" `681 
f B "set_ticks" 1 1455 "void(int8 value)" `680 
f N "set_ticks" 1 1456 ""
v L "value" 1 1456 "int16" `683 
f B "set_ticks" 1 1456 "void(int16 value)" `682 
f N "set_ticks" 1 1457 ""
v L "value" 1 1457 "int32" `685 
f B "set_ticks" 1 1457 "void(int32 value)" `684 
f N "set_ticks" 1 1458 ""
v L "stream" 1 1458 "int8" `687 
v L "value" 1 1458 "int8" `688 
f B "set_ticks" 1 1458 "void(int8 stream,int8 value)" `686 
f N "set_ticks" 1 1459 ""
v L "stream" 1 1459 "int8" `690 
v L "value" 1 1459 "int16" `691 
f B "set_ticks" 1 1459 "void(int8 stream,int16 value)" `689 
f N "set_ticks" 1 1460 ""
v L "stream" 1 1460 "int8" `693 
v L "value" 1 1460 "int32" `694 
f B "set_ticks" 1 1460 "void(int8 stream,int32 value)" `692  "#use pwm() Prototypes:"
f N "pwm_on" 1 1463 ""
f B "pwm_on" 1 1463 "void()" `695 
f N "pwm_on" 1 1464 ""
v L "stream" 1 1464 "int8" `697 
f B "pwm_on" 1 1464 "void(int8 stream)" `696 
f N "pwm_off" 1 1465 ""
f B "pwm_off" 1 1465 "void()" `698 
f N "pwm_off" 1 1466 ""
v L "stream" 1 1466 "int8" `700 
f B "pwm_off" 1 1466 "void(int8 stream)" `699 
f N "pwm_set_duty" 1 1467 ""
v L "duty" 1 1467 "int16" `702 
f B "pwm_set_duty" 1 1467 "void(int16 duty)" `701 
f N "pwm_set_duty" 1 1468 ""
v L "stream" 1 1468 "int8" `704 
v L "duty" 1 1468 "int16" `705 
f B "pwm_set_duty" 1 1468 "void(int8 stream,int16 duty)" `703 
f N "pwm_set_duty_percent" 1 1469 ""
v L "percent" 1 1469 "int16" `707 
f B "pwm_set_duty_percent" 1 1469 "void(int16 percent)" `706 
f N "pwm_set_duty_percent" 1 1470 ""
v L "stream" 1 1470 "int8" `709 
v L "percent" 1 1470 "int16" `710 
f B "pwm_set_duty_percent" 1 1470 "void(int8 stream,int16 percent)" `708 
f N "pwm_set_frequency" 1 1471 ""
v L "frequency" 1 1471 "int32" `712 
f B "pwm_set_frequency" 1 1471 "void(int32 frequency)" `711 
f N "pwm_set_frequency" 1 1472 ""
v L "stream" 1 1472 "int8" `714 
v L "frequency" 1 1472 "int32" `715 
f B "pwm_set_frequency" 1 1472 "void(int8 stream,int32 frequency)" `713  "#use capture() Prototypes:"
f N "get_capture_time" 1 1475 ""
f B "get_capture_time" 1 1475 "int16()" `716 
f N "get_capture_time" 1 1476 ""
v L "stream" 1 1476 "int8" `718 
f B "get_capture_time" 1 1476 "int16(int8 stream)" `717 
f N "get_capture_event" 1 1477 ""
f B "get_capture_event" 1 1477 "int8()" `719 
f N "get_capture_event" 1 1478 ""
v L "stream" 1 1478 "int8" `721 
f B "get_capture_event" 1 1478 "int8(int8 stream)" `720  "Enviroment Prototypes:"
c L "get_capture_event" 1 3 2 "FUNCTION"
f N "goto_address" 1 1491 ""
v L "address" 1 1491 "int32" `723 
f B "goto_address" 1 1491 "void(int32 address)" `722 
f N "label_address" 1 1492 ""
v L "label" 1 1492 "int32" `725 
f B "label_address" 1 1492 "int32(int32 label)" `724  "Program Memory Read Prototypes:"
f N "read_program_memory" 1 1495 ""
v L "address" 1 1495 "int32" `727 
v L "dataptr" 1 1495 "*int8" `728 
v L "count" 1 1495 "int16" `729 
f B "read_program_memory" 1 1495 "void(int32 address,*int8 dataptr,int16 count)" `726 
f N "read_program_eeprom" 1 1496 ""
v L "address" 1 1496 "int32" `731 
f B "read_program_eeprom" 1 1496 "int16(int32 address)" `730  "Program Memory Write Prototypes:"
f N "write_program_memory" 1 1499 ""
v L "address" 1 1499 "int32" `733 
v L "dataptr" 1 1499 "*int8" `734 
v L "count" 1 1499 "int16" `735 
f B "write_program_memory" 1 1499 "void(int32 address,*int8 dataptr,int16 count)" `732 
f N "write_program_eeprom" 1 1500 ""
v L "address" 1 1500 "int32" `737 
v L "data" 1 1500 "int16" `738 
f B "write_program_eeprom" 1 1500 "void(int32 address,int16 data)" `736  "EEPROM Prototypes:"
d G "__EEADDRESS__" 1 1505 "unsigned int16"
f N "read_eeprom" 1 1510 ""
v L "address" 1 1510 "int16" `740 
f B "read_eeprom" 1 1510 "int8(int16 address)" `739 
f N "write_eeprom" 1 1511 ""
v L "address" 1 1511 "int16" `742 
v L "value" 1 1511 "int8" `743 
f B "write_eeprom" 1 1511 "void(int16 address,int8 value)" `741  "INT"
c L "write_eeprom" 1 3 4 "FUNCTION"
f N "enable_interrupts" 1 1518 ""
v L "interrupt" 1 1518 "int32" `745 
f B "enable_interrupts" 1 1518 "void(int32 interrupt)" `744 
f N "disable_interrupts" 1 1519 ""
v L "interrupt" 1 1519 "int32" `747 
f B "disable_interrupts" 1 1519 "void(int32 interrupt)" `746 
f N "clear_interrupt" 1 1520 ""
v L "interrupt" 1 1520 "int32" `749 
f B "clear_interrupt" 1 1520 "void(int32 interrupt)" `748 
f N "interrupt_active" 1 1521 ""
v L "interrupt" 1 1521 "int32" `751 
f B "interrupt_active" 1 1521 "int8(int32 interrupt)" `750 
f N "interrupt_enabled" 1 1522 ""
v L "interrupt" 1 1522 "int32" `753 
f B "interrupt_enabled" 1 1522 "int8(int32 interrupt)" `752 
f N "ext_int_edge" 1 1523 ""
v L "source" 1 1523 "int8" `755 
v L "edge" 1 1523 "int8" `756 
f B "ext_int_edge" 1 1523 "void(int8 source,int8 edge)" `754 
f N "jump_to_isr" 1 1524 ""
v L "address" 1 1524 "int16" `758 
f B "jump_to_isr" 1 1524 "void(int16 address)" `757  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 1 1526 "0x40"
d G "H_TO_L" 1 1527 "0"
d G "GLOBAL" 1 1529 "0xF2C0"
d G "PERIPH" 1 1530 "0xF240"
d G "INT_IOC_A0" 1 1531 "0x3001C210"
d G "INT_IOC_A0_L2H" 1 1532 "0x1001C210"
d G "INT_IOC_A0_H2L" 1 1533 "0x2001C210"
d G "INT_IOC_A1" 1 1534 "0x3002C210"
d G "INT_IOC_A1_L2H" 1 1535 "0x1002C210"
d G "INT_IOC_A1_H2L" 1 1536 "0x2002C210"
d G "INT_IOC_A2" 1 1537 "0x3004C210"
d G "INT_IOC_A2_L2H" 1 1538 "0x1004C210"
d G "INT_IOC_A2_H2L" 1 1539 "0x2004C210"
d G "INT_IOC_A3" 1 1540 "0x3008C210"
d G "INT_IOC_A3_L2H" 1 1541 "0x1008C210"
d G "INT_IOC_A3_H2L" 1 1542 "0x2008C210"
d G "INT_IOC_A4" 1 1543 "0x3010C210"
d G "INT_IOC_A4_L2H" 1 1544 "0x1010C210"
d G "INT_IOC_A4_H2L" 1 1545 "0x2010C210"
d G "INT_IOC_A5" 1 1546 "0x3020C210"
d G "INT_IOC_A5_L2H" 1 1547 "0x1020C210"
d G "INT_IOC_A5_H2L" 1 1548 "0x2020C210"
d G "INT_IOC_A6" 1 1549 "0x3040C210"
d G "INT_IOC_A6_L2H" 1 1550 "0x1040C210"
d G "INT_IOC_A6_H2L" 1 1551 "0x2040C210"
d G "INT_IOC_A7" 1 1552 "0x3080C210"
d G "INT_IOC_A7_L2H" 1 1553 "0x1080C210"
d G "INT_IOC_A7_H2L" 1 1554 "0x2080C210"
d G "INT_IOC_B0" 1 1555 "0x3101C210"
d G "INT_IOC_B0_L2H" 1 1556 "0x1101C210"
d G "INT_IOC_B0_H2L" 1 1557 "0x2101C210"
d G "INT_IOC_B1" 1 1558 "0x3102C210"
d G "INT_IOC_B1_L2H" 1 1559 "0x1102C210"
d G "INT_IOC_B1_H2L" 1 1560 "0x2102C210"
d G "INT_IOC_B2" 1 1561 "0x3104C210"
d G "INT_IOC_B2_L2H" 1 1562 "0x1104C210"
d G "INT_IOC_B2_H2L" 1 1563 "0x2104C210"
d G "INT_IOC_B3" 1 1564 "0x3108C210"
d G "INT_IOC_B3_L2H" 1 1565 "0x1108C210"
d G "INT_IOC_B3_H2L" 1 1566 "0x2108C210"
d G "INT_IOC_B4" 1 1567 "0x3110C210"
d G "INT_IOC_B4_L2H" 1 1568 "0x1110C210"
d G "INT_IOC_B4_H2L" 1 1569 "0x2110C210"
d G "INT_IOC_B5" 1 1570 "0x3120C210"
d G "INT_IOC_B5_L2H" 1 1571 "0x1120C210"
d G "INT_IOC_B5_H2L" 1 1572 "0x2120C210"
d G "INT_IOC_B6" 1 1573 "0x3140C210"
d G "INT_IOC_B6_L2H" 1 1574 "0x1140C210"
d G "INT_IOC_B6_H2L" 1 1575 "0x2140C210"
d G "INT_IOC_B7" 1 1576 "0x3180C210"
d G "INT_IOC_B7_L2H" 1 1577 "0x1180C210"
d G "INT_IOC_B7_H2L" 1 1578 "0x2180C210"
d G "INT_IOC_C0" 1 1579 "0x3201C210"
d G "INT_IOC_C0_L2H" 1 1580 "0x1201C210"
d G "INT_IOC_C0_H2L" 1 1581 "0x2201C210"
d G "INT_IOC_C1" 1 1582 "0x3202C210"
d G "INT_IOC_C1_L2H" 1 1583 "0x1202C210"
d G "INT_IOC_C1_H2L" 1 1584 "0x2202C210"
d G "INT_IOC_C2" 1 1585 "0x3204C210"
d G "INT_IOC_C2_L2H" 1 1586 "0x1204C210"
d G "INT_IOC_C2_H2L" 1 1587 "0x2204C210"
d G "INT_IOC_C3" 1 1588 "0x3208C210"
d G "INT_IOC_C3_L2H" 1 1589 "0x1208C210"
d G "INT_IOC_C3_H2L" 1 1590 "0x2208C210"
d G "INT_IOC_C4" 1 1591 "0x3210C210"
d G "INT_IOC_C4_L2H" 1 1592 "0x1210C210"
d G "INT_IOC_C4_H2L" 1 1593 "0x2210C210"
d G "INT_IOC_C5" 1 1594 "0x3220C210"
d G "INT_IOC_C5_L2H" 1 1595 "0x1220C210"
d G "INT_IOC_C5_H2L" 1 1596 "0x2220C210"
d G "INT_IOC_C6" 1 1597 "0x3240C210"
d G "INT_IOC_C6_L2H" 1 1598 "0x1240C210"
d G "INT_IOC_C6_H2L" 1 1599 "0x2240C210"
d G "INT_IOC_C7" 1 1600 "0x3280C210"
d G "INT_IOC_C7_L2H" 1 1601 "0x1280C210"
d G "INT_IOC_C7_H2L" 1 1602 "0x2280C210"
d G "INT_IOC_E3" 1 1603 "0x3408C210"
d G "INT_IOC_E3_L2H" 1 1604 "0x1408C210"
d G "INT_IOC_E3_H2L" 1 1605 "0x2408C210"
d G "INT_EXT_L2H" 1 1606 "0x5000C201"
d G "INT_EXT_H2L" 1 1607 "0x6000C201"
d G "INT_EXT" 1 1608 "0x00C201"
d G "INT_EXT1_L2H" 1 1609 "0x5001C202"
d G "INT_EXT1_H2L" 1 1610 "0x6001C202"
d G "INT_EXT1" 1 1611 "0x00C202"
d G "INT_EXT2_L2H" 1 1612 "0x5002C204"
d G "INT_EXT2_H2L" 1 1613 "0x6002C204"
d G "INT_EXT2" 1 1614 "0x00C204"
d G "INT_IOC" 1 1615 "0x0FFFC210"
d G "INT_TIMER0" 1 1616 "0x00C220"
d G "INT_AD" 1 1617 "0x00C301"
d G "INT_AD_THRESHOLD" 1 1618 "0x00C302"
d G "INT_CSW" 1 1619 "0x00C340"
d G "INT_OSC_FAIL" 1 1620 "0x00C380"
d G "INT_COMP1" 1 1621 "0x00C401"
d G "INT_COMP2" 1 1622 "0x00C402"
d G "INT_ZCD" 1 1623 "0x00C440"
d G "INT_LOWVOLT" 1 1624 "0x00C480"
d G "INT_SSP" 1 1625 "0x00C501"
d G "INT_BUSCOL" 1 1626 "0x00C502"
d G "INT_SSP2" 1 1627 "0x00C504"
d G "INT_BUSCOL2" 1 1628 "0x00C508"
d G "INT_TBE" 1 1629 "0x00C510"
d G "INT_RDA" 1 1630 "0x00C520"
d G "INT_TBE2" 1 1631 "0x00C540"
d G "INT_RDA2" 1 1632 "0x00C580"
d G "INT_TIMER1" 1 1633 "0x00C601"
d G "INT_TIMER2" 1 1634 "0x00C602"
d G "INT_TIMER3" 1 1635 "0x00C604"
d G "INT_TIMER4" 1 1636 "0x00C608"
d G "INT_TIMER5" 1 1637 "0x00C610"
d G "INT_TIMER6" 1 1638 "0x00C620"
d G "INT_TMR1G" 1 1639 "0x00C701"
d G "INT_TMR3G" 1 1640 "0x00C702"
d G "INT_TMR5G" 1 1641 "0x00C704"
d G "INT_CCP1" 1 1642 "0x00C801"
d G "INT_CCP2" 1 1643 "0x00C802"
d G "INT_CWG" 1 1644 "0x00C901"
d G "INT_EEPROM" 1 1645 "0x00C920"
d G "INT_CRC" 1 1646 "0x00C940"
d G "INT_SCANNER" 1 1647 "0x00C980"
C L "jump_to_isr" 0 6 1 "FUNCTION"
C L "jump_to_isr" 0 6 1 "FUNCTION"
C L "jump_to_isr" 0 6 1 "FUNCTION"
C L "jump_to_isr" 0 6 1 "FUNCTION"
C L "jump_to_isr" 0 6 1 "FUNCTION"
C L "jump_to_isr" 0 6 1 "FUNCTION"
V G "IO_Port_One" 0 13 "{int4 ExperimentSelect,int4 unused_A,int4 FourBitInput,int4 unused_B,int4 MultiBitOutput,int4 unused_C}" `770 
V G "IO_Direction_One" 0 13 "{int4 ExperimentSelect,int4 unused_A,int4 FourBitInput,int4 unused_B,int4 MultiBitOutput,int4 unused_C}" `771 
V G "IO_Latch_One" 0 13 "{int4 ExperimentSelect,int4 unused_A,int4 FourBitInput,int4 unused_B,int4 MultiBitOutput,int4 unused_C}" `772  "naming variables of 1st structure"
C L "jump_to_isr" 0 6 1 "FUNCTION"
C L "jump_to_isr" 0 6 1 "FUNCTION"
C L "jump_to_isr" 0 6 1 "FUNCTION"
C L "jump_to_isr" 0 6 1 "FUNCTION"
C L "jump_to_isr" 0 6 1 "FUNCTION"
V G "IO_Port_Two" 0 26 "{int4 ExperimentSelect,int2 unused_A1,int1 Clock_Output,int1 unused_A2,int1 Set,int1 Reset,int6 unused_B,int6 SixBitOutput,int2 unused_C}" `783 
V G "IO_Direction_Two" 0 26 "{int4 ExperimentSelect,int2 unused_A1,int1 Clock_Output,int1 unused_A2,int1 Set,int1 Reset,int6 unused_B,int6 SixBitOutput,int2 unused_C}" `784 
V G "IO_Latch_Two" 0 26 "{int4 ExperimentSelect,int2 unused_A1,int1 Clock_Output,int1 unused_A2,int1 Set,int1 Reset,int6 unused_B,int6 SixBitOutput,int2 unused_C}" `785  "naming variables of 2nd structure"
C L "jump_to_isr" 0 6 1 "FUNCTION"
C L "jump_to_isr" 0 6 1 "FUNCTION"
C L "jump_to_isr" 0 6 1 "FUNCTION"
C L "jump_to_isr" 0 6 1 "FUNCTION"
C L "jump_to_isr" 0 6 1 "FUNCTION"
C L "jump_to_isr" 0 6 1 "FUNCTION"
C L "jump_to_isr" 0 6 1 "FUNCTION"
C L "jump_to_isr" 0 6 1 "FUNCTION"
C L "jump_to_isr" 0 6 1 "FUNCTION"
V G "IO_Port_Three" 0 38 "{int4 ExperimentSelect,int4 unused_A,int2 Logic_Input_One,int2 Logic_Input_Two,int4 unused_B,int3 ThreeBitOutput_One,int3 ThreeBitOutput_Two,int2 unused_C}" `795 
V G "IO_Direction_Three" 0 38 "{int4 ExperimentSelect,int4 unused_A,int2 Logic_Input_One,int2 Logic_Input_Two,int4 unused_B,int3 ThreeBitOutput_One,int3 ThreeBitOutput_Two,int2 unused_C}" `796 
V G "IO_Latch_Three" 0 38 "{int4 ExperimentSelect,int4 unused_A,int2 Logic_Input_One,int2 Logic_Input_Two,int4 unused_B,int3 ThreeBitOutput_One,int3 ThreeBitOutput_Two,int2 unused_C}" `797  "naming variables of 3rd structure"
C L "jump_to_isr" 0 6 1 "FUNCTION"
C L "jump_to_isr" 0 6 1 "FUNCTION"
C L "jump_to_isr" 0 6 1 "FUNCTION"
C L "jump_to_isr" 0 6 1 "FUNCTION"
C L "jump_to_isr" 0 6 1 "FUNCTION"
C L "jump_to_isr" 0 6 1 "FUNCTION"
C L "jump_to_isr" 0 6 1 "FUNCTION"
C L "jump_to_isr" 0 6 1 "FUNCTION"
C L "jump_to_isr" 0 6 1 "FUNCTION"
F N "main" 0 52 ""
F G "main" 0 53 "void()" `798 
V L "LUT" 0 61 "int8[16]" `801 
V L "samplingrates" 0 62 "int8[16]" `802 
V L "FSMLab_One" 0 63 "int8[16]" `803 
C L "main" 0 6 1 "FUNCTION"
V L "counter" 0 65 "int8" `804 
C L "main" 0 6 1 "FUNCTION"
C L "main" 0 6 1 "FUNCTION"
C L "main" 0 6 1 "FUNCTION"
C L "main" 0 6 1 "FUNCTION"
C L "main" 0 6 1 "FUNCTION"
C L "main" 0 6 1 "FUNCTION"
C L "main" 0 6 1 "FUNCTION"
C L "main" 0 6 1 "FUNCTION"
C L "main" 0 6 1 "FUNCTION"
C L "main" 0 6 1 "FUNCTION"
C L "main" 0 6 1 "FUNCTION"
C L "main" 0 6 1 "FUNCTION"
C L "main" 0 6 1 "FUNCTION"
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 1
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 3 0
F B "read_program_memory" 3 0
F B "read_rom_memory" 3 0
F B "erase_program_eeprom" 1 0
F B "write_configuration_memory" 2 3
F B "read_configuration_memory" 2 3
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "output_c" 1 0
F B "output_e" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "input_c" 0 0
F B "input_e" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "set_tris_c" 1 0
F B "set_tris_e" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "get_tris_c" 0 0
F B "get_tris_e" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "input_change_c" 0 0
F B "input_change_e" 0 0
F B "set_slow_slew_a" 1 0
F B "set_slow_slew_b" 1 0
F B "set_slow_slew_c" 1 0
F B "set_slow_slew_e" 1 0
F B "set_input_level_a" 1 0
F B "set_input_level_b" 1 0
F B "set_input_level_c" 1 0
F B "set_input_level_e" 1 0
F B "set_open_drain_a" 1 0
F B "set_open_drain_b" 1 0
F B "set_open_drain_c" 1 0
F B "port_a_pullups" 1 0
F B "port_b_pullups" 1 0
F B "port_c_pullups" 1 0
F B "port_e_pullups" 1 0
F B "pin_select" 2 4
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "get_wdt" 0 0
F B "setup_comparator" 1 0
F B "set_analog_pins" 0 255
F B "setup_adc_reference" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 3
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "set_adc_trigger" 1 0
F B "adc_write" 2 0
F B "adc_read" 1 0
F B "adc_status" 0 0
F B "get_capture" 0 1
F B "set_compare_time" 1 2
F B "setup_timer_0" 1 3
F B "setup_vref" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_timer_3" 1 0
F B "set_timer3" 1 0
F B "get_timer3" 0 0
F B "setup_timer_4" 3 0
F B "get_timer4" 0 0
F B "set_timer4" 1 0
F B "setup_timer_6" 3 0
F B "get_timer6" 0 0
F B "set_timer6" 1 0
F B "setup_timer_5" 1 0
F B "get_timer5" 0 0
F B "set_timer5" 1 0
F B "setup_ccp1" 1 0
F B "set_pwm1_duty" 1 0
F B "setup_ccp2" 1 0
F B "set_pwm2_duty" 1 0
F B "setup_pwm3" 1 0
F B "set_pwm3_duty" 1 0
F B "setup_pwm4" 1 0
F B "set_pwm4_duty" 1 0
F B "setup_low_volt_detect" 1 0
F B "setup_oscillator" 0 2
F B "pll_locked" 0 0
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 2
F B "spi_data_is_in2" 0 0
F B "setup_dac" 1 0
F B "dac_write" 1 0
F B "brownout_enable" 1 0
F B "setup_cwg" 4 0
F B "cwg_status" 0 0
F B "cwg_restart" 0 0
F B "setup_dsm" 1 3
F B "setup_zcd" 1 0
F B "zcd_status" 0 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
