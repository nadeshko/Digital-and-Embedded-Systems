CCS PCH C Compiler, Version 5.081, 44464               03-Feb-20 11:35

               Filename:   D:\Final Lab 4\Gray.lst

               ROM used:   926 bytes (1%)
                           Largest free fragment is 65536
               RAM used:   55 (1%) at main() level
                           55 (1%) worst case
               Stack used: 1 locations
               Stack size: 31

*
00000:  GOTO   0030
.................... #include <18F27K40.h> 
.................... //////////// Standard Header file for the PIC18F27K40 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F27K40 
....................  
.................... #list 
....................  
.................... #fuses NOMCLR RSTOSC_HFINTRC_1MHZ CLKOUT NOWDT NOPROTECT NOCPD NOPUT 
.................... #use delay(internal=16MHZ, clock_out) 
00004:  CLRF   FEA
00006:  MOVLW  37
00008:  MOVWF  FE9
0000A:  MOVF   FEF,W
0000C:  BTFSC  FD8.2
0000E:  GOTO   002E
00012:  MOVLW  05
00014:  MOVWF  01
00016:  CLRF   00
00018:  DECFSZ 00,F
0001A:  BRA    0018
0001C:  DECFSZ 01,F
0001E:  BRA    0016
00020:  MOVLW  2E
00022:  MOVWF  00
00024:  DECFSZ 00,F
00026:  BRA    0024
00028:  BRA    002A
0002A:  DECFSZ FEF,F
0002C:  BRA    0012
0002E:  RETURN 0
....................  
.................... struct IOPort_Definition1 
.................... {                       // 1st structure 
....................    int ExperimentSelect:4;  // Pins RA0..3 for selection 
....................    int unused_A:4;     // remaining RA 
....................    int FourBitInput:4; 
....................    int unused_B:4;       // unused B pins 
....................    int MultiBitOutput:4;    // Pin RC0 LED used for single-bit indication 
....................    int unused_C:4;          //Remaining bits of Port C; 
.................... } IO_Port_One, IO_Direction_One, IO_Latch_One; //naming variables of 1st structure 
....................  
.................... struct IOPort_Definition2  
.................... {                       // 2nd structure 
....................    int ExperimentSelect:4;       // Pins RA0..3 for selection 
....................    int unused_A1:2; 
....................    int1 Clock_Output; 
....................    int1 unused_A2; 
....................    int1 Set;                      
....................    int1 Reset; 
....................    int unused_B:6;               // remaining B's  
....................    int SixBitOutput:6;   // RC0..1 for logic output; 
....................    int unused_C:2;               // remaining RCs 
.................... } IO_Port_Two, IO_Direction_Two, IO_Latch_Two;  //naming variables of 2nd structure  
....................  
.................... struct IOPort_Definition3 
.................... {                       // 3rd strucutre 
....................    int ExperimentSelect:4;       // Pins RA0..3 for selection 
....................    int unused_A:4;               // remaining RA 
....................    int Logic_Input_One:2;        // bitwise logic operations in RB0..3 
....................    int Logic_Input_Two:2;             // Reset switch on Pin RB1 
....................    int unused_B:4;               // remaining RB pins 
....................    int ThreeBitOutput_One:3;     // LED output pin RC0..2 
....................    int ThreeBitOutput_Two:3;     // LED output pin RC3..5  
....................    int unused_C:2;               // unused RC6..7 
.................... } IO_Port_Three, IO_Direction_Three, IO_Latch_Three; //naming variables of 3rd structure 
....................  
.................... #byte IO_Port_One = 0xF8D       // PORTA register in Special Function Register (SFR) 
.................... #byte IO_Direction_One = 0xF88  // TRISA register 
.................... #byte IO_Latch_One = 0xF83      // LATA register 
....................  
.................... #byte IO_Port_Two = 0xF8D       // PORTA register in Special Function Register (SFR) 
.................... #byte IO_Direction_Two = 0xF88  // TRISA register 
.................... #byte IO_Latch_Two = 0xF83      // LATA register 
....................  
.................... #byte IO_Port_Three = 0xF8D       // PORTA register in Special Function Register (SFR) 
.................... #byte IO_Direction_Three = 0xF88  // TRISA register 
.................... #byte IO_Latch_Three = 0xF83      // LATA register 
....................  
.................... void main () 
00030:  BSF    F81.7
00032:  BCF    F81.6
00034:  CLRF   FF8
00036:  BCF    FF2.5
00038:  MOVLB  E
0003A:  CLRF   xDD
0003C:  CLRF   xDA
0003E:  CLRF   xDC
00040:  MOVLW  05
00042:  MOVWF  xDE
00044:  MOVLW  60
00046:  MOVWF  xD8
00048:  MOVLB  F
0004A:  CLRF   x11
0004C:  CLRF   x19
0004E:  CLRF   x21
00050:  CLRF   x3A
00052:  CLRF   x3B
00054:  CLRF   x3C
00056:  CLRF   x39
00058:  CLRF   x36
0005A:  CLRF   x37
0005C:  CLRF   x38
0005E:  CLRF   x35
.................... { 
....................    IO_Direction_One.ExperimentSelect = 0b1111; 
00060:  MOVLW  F0
00062:  ANDWF  F88,W
00064:  IORLW  0F
00066:  MOVWF  F88
....................    IO_Direction_One.unused_A = 0b0000; 
00068:  MOVLW  0F
0006A:  ANDWF  F88,W
0006C:  MOVWF  F88
....................    IO_Direction_One.FourBitInput= 0b1111; 
0006E:  MOVLW  F0
00070:  ANDWF  F89,W
00072:  IORLW  0F
00074:  MOVWF  F89
....................    IO_Direction_One.unused_B = 0b0000; 
00076:  MOVLW  0F
00078:  ANDWF  F89,W
0007A:  MOVWF  F89
....................    IO_Direction_Two.SixBitOutput = 0b000000; 
0007C:  MOVLW  C0
0007E:  ANDWF  F8A,W
00080:  MOVWF  F8A
....................    IO_Direction_Two.unused_C = 0b00; 
00082:  MOVLW  3F
00084:  ANDWF  F8A,W
00086:  MOVWF  F8A
....................     
....................    int LUT[16] = {0x00, 0x01, 0x03, 0x02, 0x06, 0x07, 0x05, 0x04, 0x0C, 0x0D, 0x0F, 0x0E, 0x0A, 0x0B, 0x09, 0x08}; 
00088:  CLRF   05
0008A:  MOVLW  01
0008C:  MOVWF  06
0008E:  MOVLW  03
00090:  MOVWF  07
00092:  MOVLW  02
00094:  MOVWF  08
00096:  MOVLW  06
00098:  MOVWF  09
0009A:  MOVLW  07
0009C:  MOVWF  0A
0009E:  MOVLW  05
000A0:  MOVWF  0B
000A2:  MOVLW  04
000A4:  MOVWF  0C
000A6:  MOVLW  0C
000A8:  MOVWF  0D
000AA:  MOVLW  0D
000AC:  MOVWF  0E
000AE:  MOVLW  0F
000B0:  MOVWF  0F
000B2:  MOVLW  0E
000B4:  MOVWF  10
000B6:  MOVLW  0A
000B8:  MOVWF  11
000BA:  MOVLW  0B
000BC:  MOVWF  12
000BE:  MOVLW  09
000C0:  MOVWF  13
000C2:  MOVLW  08
000C4:  MOVWF  14
....................    int samplingrates[16] = {50, 90, 120, 400, 500, 800, 940, 1000, 1350, 1800, 2000, 3000, 4000, 6000, 8000, 10000}; 
000C6:  MOVLW  32
000C8:  MOVWF  15
000CA:  MOVLW  5A
000CC:  MOVWF  16
000CE:  MOVLW  78
000D0:  MOVWF  17
000D2:  MOVLW  90
000D4:  MOVWF  18
000D6:  MOVLW  F4
000D8:  MOVWF  19
000DA:  MOVLW  20
000DC:  MOVWF  1A
000DE:  MOVLW  AC
000E0:  MOVWF  1B
000E2:  MOVLW  E8
000E4:  MOVWF  1C
000E6:  MOVLW  46
000E8:  MOVWF  1D
000EA:  MOVLW  08
000EC:  MOVWF  1E
000EE:  MOVLW  D0
000F0:  MOVWF  1F
000F2:  MOVLW  B8
000F4:  MOVWF  20
000F6:  MOVLW  A0
000F8:  MOVWF  21
000FA:  MOVLW  70
000FC:  MOVWF  22
000FE:  MOVLW  40
00100:  MOVWF  23
00102:  MOVLW  10
00104:  MOVWF  24
....................    int FSMLab_One[16] = {0x1E, 0x04, 0x05, 0x0F, 0x0D, 0x02, 0x03, 0x0B, 0x0C, 0x01, 0x00, 0x06, 0x07, 0x08, 0x09, 0x0A}; //Look up Table for FSM Lab 1 
00106:  MOVLW  1E
00108:  MOVWF  25
0010A:  MOVLW  04
0010C:  MOVWF  26
0010E:  MOVLW  05
00110:  MOVWF  27
00112:  MOVLW  0F
00114:  MOVWF  28
00116:  MOVLW  0D
00118:  MOVWF  29
0011A:  MOVLW  02
0011C:  MOVWF  2A
0011E:  MOVLW  03
00120:  MOVWF  2B
00122:  MOVLW  0B
00124:  MOVWF  2C
00126:  MOVLW  0C
00128:  MOVWF  2D
0012A:  MOVLW  01
0012C:  MOVWF  2E
0012E:  CLRF   2F
00130:  MOVLW  06
00132:  MOVWF  30
00134:  MOVLW  07
00136:  MOVWF  31
00138:  MOVLW  08
0013A:  MOVWF  32
0013C:  MOVLW  09
0013E:  MOVWF  33
00140:  MOVLW  0A
00142:  MOVWF  34
....................  
....................    int counter = 0; 
00144:  CLRF   35
....................     
....................    port_a_pullups(0xFF); 
00146:  SETF   x10
....................    port_b_pullups(0xFF); 
00148:  SETF   x18
....................     
....................     
....................    while(1) 
....................    { 
....................       switch (IO_Port_One.ExperimentSelect) 
0014A:  MOVF   F8D,W
0014C:  ANDLW  0F
0014E:  XORLW  00
00150:  MOVLB  0
00152:  BZ    0196
00154:  XORLW  01
00156:  BZ    01A0
00158:  XORLW  02
0015A:  BZ    01CC
0015C:  XORLW  07
0015E:  BZ    01EC
00160:  XORLW  01
00162:  BZ    020E
00164:  XORLW  03
00166:  BTFSC  FD8.2
00168:  BRA    0244
0016A:  XORLW  01
0016C:  BTFSC  FD8.2
0016E:  BRA    0292
00170:  XORLW  0F
00172:  BTFSC  FD8.2
00174:  BRA    02B2
00176:  XORLW  01
00178:  BTFSC  FD8.2
0017A:  BRA    02D2
0017C:  XORLW  03
0017E:  BTFSC  FD8.2
00180:  BRA    02E6
00182:  XORLW  01
00184:  BTFSC  FD8.2
00186:  BRA    0306
00188:  XORLW  07
0018A:  BTFSC  FD8.2
0018C:  BRA    0332
0018E:  XORLW  01
00190:  BTFSC  FD8.2
00192:  BRA    035A
00194:  BRA    0390
....................       { 
....................          case 0b0000: 
....................          { 
....................             IO_Port_One.MultiBitOutput = 0b0000; 
00196:  MOVLW  F0
00198:  ANDWF  F8F,W
0019A:  MOVWF  F8F
....................             counter = 0; 
0019C:  CLRF   35
....................             break; 
0019E:  BRA    0398
....................          } 
....................          case 0b0001: //single led toggling 
....................          { 
....................             IO_Port_One.MultiBitOutput = 0b0001;  // Toggle single LED 
001A0:  MOVLW  F0
001A2:  ANDWF  F8F,W
001A4:  IORLW  01
001A6:  MOVWF  F8F
....................             delay_ms(500); //delays for 1 second before restarting loop 
001A8:  MOVLW  02
001AA:  MOVWF  36
001AC:  MOVLW  FA
001AE:  MOVWF  37
001B0:  RCALL  0004
001B2:  DECFSZ 36,F
001B4:  BRA    01AC
....................             IO_Port_One.MultiBitOutput = 0b0000; 
001B6:  MOVLW  F0
001B8:  ANDWF  F8F,W
001BA:  MOVWF  F8F
....................             delay_ms(500); 
001BC:  MOVLW  02
001BE:  MOVWF  36
001C0:  MOVLW  FA
001C2:  MOVWF  37
001C4:  RCALL  0004
001C6:  DECFSZ 36,F
001C8:  BRA    01C0
....................             break; 
001CA:  BRA    0398
....................          } 
....................          case 0b0011: //4bit pure binary up counter 
....................          { 
....................             IO_Port_One.MultiBitOutput++; 
001CC:  MOVF   F8F,W
001CE:  ADDLW  01
001D0:  ANDLW  0F
001D2:  MOVWF  00
001D4:  MOVLW  F0
001D6:  ANDWF  F8F,W
001D8:  IORWF  00,W
001DA:  MOVWF  F8F
....................             delay_ms(1000); 
001DC:  MOVLW  04
001DE:  MOVWF  36
001E0:  MOVLW  FA
001E2:  MOVWF  37
001E4:  RCALL  0004
001E6:  DECFSZ 36,F
001E8:  BRA    01E0
....................             break; 
001EA:  BRA    0398
....................          } 
....................          case 0b0100: //4bit pure binary down counter 
....................          { 
....................             IO_Port_One.MultiBitOutput -= 1; 
001EC:  MOVF   F8F,W
001EE:  ANDLW  0F
001F0:  ADDLW  FF
001F2:  ANDLW  0F
001F4:  MOVWF  00
001F6:  MOVLW  F0
001F8:  ANDWF  F8F,W
001FA:  IORWF  00,W
001FC:  MOVWF  F8F
....................             delay_ms(1000); 
001FE:  MOVLW  04
00200:  MOVWF  36
00202:  MOVLW  FA
00204:  MOVWF  37
00206:  RCALL  0004
00208:  DECFSZ 36,F
0020A:  BRA    0202
....................             break; 
0020C:  BRA    0398
....................          } 
....................          case 0b0101: 
....................          { 
....................             IO_Port_One.MultiBitOutput = LUT[counter++]; 
0020E:  MOVF   35,W
00210:  INCF   35,F
00212:  CLRF   03
00214:  ADDLW  05
00216:  MOVWF  FE9
00218:  MOVLW  00
0021A:  ADDWFC 03,W
0021C:  MOVWF  FEA
0021E:  MOVF   FEF,W
00220:  ANDLW  0F
00222:  MOVWF  00
00224:  MOVLW  F0
00226:  ANDWF  F8F,W
00228:  IORWF  00,W
0022A:  MOVWF  F8F
....................             delay_ms(1000); 
0022C:  MOVLW  04
0022E:  MOVWF  36
00230:  MOVLW  FA
00232:  MOVWF  37
00234:  RCALL  0004
00236:  DECFSZ 36,F
00238:  BRA    0230
....................             if (counter == 16) 
0023A:  MOVF   35,W
0023C:  SUBLW  10
0023E:  BNZ   0242
....................                { 
....................                counter = 0; 
00240:  CLRF   35
....................                } 
....................             break; 
00242:  BRA    0398
....................          } 
....................          case 0b0110: //3bit pure binary up-counter with 3bit gray-code up-counter 
....................          { 
....................             IO_Port_Three.ThreeBitOutput_One++; 
00244:  MOVF   F8F,W
00246:  ADDLW  01
00248:  ANDLW  07
0024A:  MOVWF  00
0024C:  MOVLW  F8
0024E:  ANDWF  F8F,W
00250:  IORWF  00,W
00252:  MOVWF  F8F
....................             IO_Port_Three.ThreeBitOutput_Two = LUT[counter++]; 
00254:  MOVF   35,W
00256:  INCF   35,F
00258:  CLRF   03
0025A:  ADDLW  05
0025C:  MOVWF  FE9
0025E:  MOVLW  00
00260:  ADDWFC 03,W
00262:  MOVWF  FEA
00264:  MOVF   FEF,W
00266:  ANDLW  07
00268:  MOVWF  00
0026A:  BCF    FD8.0
0026C:  RLCF   00,F
0026E:  RLCF   00,F
00270:  RLCF   00,F
00272:  MOVLW  C7
00274:  ANDWF  F8F,W
00276:  IORWF  00,W
00278:  MOVWF  F8F
....................             delay_ms(1000); 
0027A:  MOVLW  04
0027C:  MOVWF  36
0027E:  MOVLW  FA
00280:  MOVWF  37
00282:  RCALL  0004
00284:  DECFSZ 36,F
00286:  BRA    027E
....................             if (counter == 8) 
00288:  MOVF   35,W
0028A:  SUBLW  08
0028C:  BNZ   0290
....................                { 
....................                counter = 0; 
0028E:  CLRF   35
....................                } 
....................             break; 
00290:  BRA    0398
....................          } 
....................          case 0b0111: //bitwise AND operation 
....................          { 
....................             IO_Port_One.MultiBitOutput = IO_Port_Three.Logic_Input_One & IO_Port_Three.Logic_Input_Two; 
00292:  MOVF   F8E,W
00294:  ANDLW  03
00296:  MOVWF  36
00298:  MOVFF  F8E,00
0029C:  RRCF   00,F
0029E:  RRCF   00,W
002A0:  ANDLW  03
002A2:  ANDWF  36,W
002A4:  ANDLW  0F
002A6:  MOVWF  00
002A8:  MOVLW  F0
002AA:  ANDWF  F8F,W
002AC:  IORWF  00,W
002AE:  MOVWF  F8F
....................             break; 
002B0:  BRA    0398
....................          } 
....................           case 0b1000: //bitwise OR operation 
....................          { 
....................             IO_Port_One.MultiBitOutput = IO_Port_Three.Logic_Input_One | IO_Port_Three.Logic_Input_Two; 
002B2:  MOVF   F8E,W
002B4:  ANDLW  03
002B6:  MOVWF  36
002B8:  MOVFF  F8E,00
002BC:  RRCF   00,F
002BE:  RRCF   00,W
002C0:  ANDLW  03
002C2:  IORWF  36,W
002C4:  ANDLW  0F
002C6:  MOVWF  00
002C8:  MOVLW  F0
002CA:  ANDWF  F8F,W
002CC:  IORWF  00,W
002CE:  MOVWF  F8F
....................             break; 
002D0:  BRA    0398
....................          } 
....................          case 0b1001: //bitwise NOT operation 
....................          { 
....................             IO_Port_One.MultiBitOutput = ~IO_Port_One.FourBitInput; 
002D2:  MOVF   F8E,W
002D4:  ANDLW  0F
002D6:  XORLW  FF
002D8:  ANDLW  0F
002DA:  MOVWF  00
002DC:  MOVLW  F0
002DE:  ANDWF  F8F,W
002E0:  IORWF  00,W
002E2:  MOVWF  F8F
....................             break; 
002E4:  BRA    0398
....................          } 
....................          case 0b1010: //bitwise XOR operation 
....................          { 
....................             IO_Port_One.MultiBitOutput = IO_Port_Three.Logic_Input_One ^ IO_Port_Three.Logic_Input_Two; 
002E6:  MOVF   F8E,W
002E8:  ANDLW  03
002EA:  MOVWF  36
002EC:  MOVFF  F8E,00
002F0:  RRCF   00,F
002F2:  RRCF   00,W
002F4:  ANDLW  03
002F6:  XORWF  36,W
002F8:  ANDLW  0F
002FA:  MOVWF  00
002FC:  MOVLW  F0
002FE:  ANDWF  F8F,W
00300:  IORWF  00,W
00302:  MOVWF  F8F
....................             break; 
00304:  BRA    0398
....................          } 
....................          case 0b1011: //set-reset flip flop 
....................          { 
....................             IO_Port_Three.ThreeBitOutput_Two = 0b000; 
00306:  MOVLW  C7
00308:  ANDWF  F8F,W
0030A:  MOVWF  F8F
....................             IO_Port_Three.ThreeBitOutput_One = (IO_Port_Two.Set | (~IO_Port_Two.Reset & IO_Port_Three.ThreeBitOutput_One)); 
0030C:  MOVLW  00
0030E:  BTFSC  F8E.0
00310:  MOVLW  01
00312:  MOVWF  36
00314:  MOVLW  00
00316:  BTFSS  F8E.1
00318:  MOVLW  01
0031A:  MOVWF  37
0031C:  MOVF   F8F,W
0031E:  ANDLW  07
00320:  ANDWF  37,W
00322:  IORWF  36,W
00324:  ANDLW  07
00326:  MOVWF  00
00328:  MOVLW  F8
0032A:  ANDWF  F8F,W
0032C:  IORWF  00,W
0032E:  MOVWF  F8F
....................             break; 
00330:  BRA    0398
....................          } 
....................          case 0b1100: //Input Table Demonstration using switches RB0..3 
....................          { 
....................             IO_Port_Two.SixBitOutput++; 
00332:  MOVF   F8F,W
00334:  ADDLW  01
00336:  ANDLW  3F
00338:  MOVWF  00
0033A:  MOVLW  C0
0033C:  ANDWF  F8F,W
0033E:  IORWF  00,W
00340:  MOVWF  F8F
....................             delay_ms(samplingrates[IO_Port_One.FourBitInput]); 
00342:  MOVF   F8E,W
00344:  ANDLW  0F
00346:  CLRF   03
00348:  ADDLW  15
0034A:  MOVWF  FE9
0034C:  MOVLW  00
0034E:  ADDWFC 03,W
00350:  MOVWF  FEA
00352:  MOVFF  FEF,37
00356:  RCALL  0004
....................             break; 
00358:  BRA    0398
....................          } 
....................          case 0b1101: //Lab 1 FSM using Look-up Table 
....................          { 
....................             IO_Port_Two.SixBitOutput = FSMLab_One[counter++]; 
0035A:  MOVF   35,W
0035C:  INCF   35,F
0035E:  CLRF   03
00360:  ADDLW  25
00362:  MOVWF  FE9
00364:  MOVLW  00
00366:  ADDWFC 03,W
00368:  MOVWF  FEA
0036A:  MOVF   FEF,W
0036C:  ANDLW  3F
0036E:  MOVWF  00
00370:  MOVLW  C0
00372:  ANDWF  F8F,W
00374:  IORWF  00,W
00376:  MOVWF  F8F
....................             delay_ms(2000); 
00378:  MOVLW  08
0037A:  MOVWF  36
0037C:  MOVLW  FA
0037E:  MOVWF  37
00380:  RCALL  0004
00382:  DECFSZ 36,F
00384:  BRA    037C
....................             if (counter == 10) 
00386:  MOVF   35,W
00388:  SUBLW  0A
0038A:  BNZ   038E
....................                { 
....................                counter = 0; 
0038C:  CLRF   35
....................                } 
....................             break; 
0038E:  BRA    0398
....................          } 
....................          default: 
....................          { 
....................             IO_Port_Two.SixBitOutput = 0b000000; 
00390:  MOVLW  C0
00392:  ANDWF  F8F,W
00394:  MOVWF  F8F
....................             counter = 0; 
00396:  CLRF   35
....................          } 
....................       }    
00398:  MOVLB  F
0039A:  BRA    014A
....................    } 
.................... } 
....................  
0039C:  SLEEP 

Configuration Fuses:
   Word  1: FEEC   NOEXTOSC RSTOSC_HFINTRC_1MHZ CLKOUT CKS FCMEN
   Word  2: FFFE   NOMCLR NOPUT NOLPBOR BROWNOUT BORV24 ZCDDIS PPS1WAY STVREN NODEBUG NOXINST
   Word  3: FF9F   WDTSW NOWDT WDTWIN_SW WDTCLK_SW
   Word  4: DFFF   NOWRT NOWRTC NOWRTB NOWRTD SCANE NOLVP
   Word  5: FFFF   NOPROTECT NOCPD
   Word  6: FFFF   NOEBTR NOEBTRB
